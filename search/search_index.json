{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Mathematical Formulation of Projectile Motion 1.1 Governing Equations of Motion Based on Newton\u2019s Second Law , and assuming no air resistance: \\[ F = ma = -mg\\hat{y} \\] This leads to two differential equations: Horizontal: $$ \\frac{d^2x}{dt^2} = 0 $$ Vertical: $$ \\frac{d^2y}{dt^2} = -g $$ 2. Solving the Equations Initial conditions: Position: \\((x_0, y_0) = (0, y_0)\\) Velocity: \\(v_0\\) at angle \\(\\theta\\) Components: $$ v_{0x} = v_0 \\cos\\theta, \\quad v_{0y} = v_0 \\sin\\theta $$ Solutions: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] \\[ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] 3. Time of Flight To find when the projectile hits the ground \\(y(t) = 0\\) : If \\(y_0 = 0\\) : \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2g y_0}}{g} \\] 4. Range Calculation \\(y_0 = 0\\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] \\(y_0 \\neq 0\\) : \\[ R = v_0 \\cos\\theta \\cdot t \\] Where \\(t\\) is the total time of flight. 5. Maximum Height \\(y_0 = 0\\) : \\[ H = \\frac{v_0^2 \\sin^2\\theta}{2g} \\] \\(y_0 \\neq 0\\) : \\[ H = y_0 + \\frac{v_0^2 \\sin^2\\theta}{2g} \\] 6. Optimal Launch Angle For maximum range (when \\(y_0 = 0\\) ): \\[ \\theta_{\\text{optimal}} = 45^\\circ \\] For \\(y_0 > 0\\) : \\[ \\theta_{\\text{optimal}} \\approx 45^\\circ - \\frac{y_0}{v_0^2} \\cdot k \\] 1.2 Range vs. Launch Angle \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] Key Insights: Launch Angle: Max range at \\(\\theta = 45^\\circ\\) Symmetry: \\(R(\\theta) = R(90^\\circ - \\theta)\\) Initial Velocity: \\(R \\propto v_0^2\\) Gravity: \\(R \\propto \\frac{1}{g}\\) Initial Height \\(y_0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2gy_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\] 3. Observations from Graphs Increasing \\(v_0\\) raises both peak and range. Higher \\(y_0\\) shifts optimal angle below \\(45^\\circ\\) . 4. Limitations & Extensions Limitations: No air resistance No wind Flat terrain Possible Extensions: Drag force: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Wind effects * Numerical models 5. Conclusion Max range at \\(45^\\circ\\) Higher \\(v_0\\) \u2192 longer range Higher \\(y_0\\) \u2192 optimal angle < \\(45^\\circ\\) Lower gravity \u2192 longer range 1.3 Angle vs. Range Analysis Projectile motion is governed by: \\[ F = ma \\] Equations of Motion: Horizontal: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ * Vertical: $$ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time of Flight (if \\(y_0 = 0\\) ): \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] Range: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2 g y_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\] Applications Sports: Optimal shots in basketball, soccer, golf. Military: Artillery, missiles. Aerospace: Planetary landing, satellite launches. Limitations & Further Work Limits: No drag No wind Level ground Future Improvements: Include air resistance: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Simulate wind effects * Use numerical methods","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#mathematical-formulation-of-projectile-motion","text":"","title":"Mathematical Formulation of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-governing-equations-of-motion","text":"Based on Newton\u2019s Second Law , and assuming no air resistance: \\[ F = ma = -mg\\hat{y} \\] This leads to two differential equations: Horizontal: $$ \\frac{d^2x}{dt^2} = 0 $$ Vertical: $$ \\frac{d^2y}{dt^2} = -g $$","title":"1.1 Governing Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-solving-the-equations","text":"Initial conditions: Position: \\((x_0, y_0) = (0, y_0)\\) Velocity: \\(v_0\\) at angle \\(\\theta\\) Components: $$ v_{0x} = v_0 \\cos\\theta, \\quad v_{0y} = v_0 \\sin\\theta $$ Solutions: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] \\[ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\]","title":"2. Solving the Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-time-of-flight","text":"To find when the projectile hits the ground \\(y(t) = 0\\) : If \\(y_0 = 0\\) : \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2g y_0}}{g} \\]","title":"3. Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-range-calculation","text":"\\(y_0 = 0\\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] \\(y_0 \\neq 0\\) : \\[ R = v_0 \\cos\\theta \\cdot t \\] Where \\(t\\) is the total time of flight.","title":"4. Range Calculation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-maximum-height","text":"\\(y_0 = 0\\) : \\[ H = \\frac{v_0^2 \\sin^2\\theta}{2g} \\] \\(y_0 \\neq 0\\) : \\[ H = y_0 + \\frac{v_0^2 \\sin^2\\theta}{2g} \\]","title":"5. Maximum Height"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-optimal-launch-angle","text":"For maximum range (when \\(y_0 = 0\\) ): \\[ \\theta_{\\text{optimal}} = 45^\\circ \\] For \\(y_0 > 0\\) : \\[ \\theta_{\\text{optimal}} \\approx 45^\\circ - \\frac{y_0}{v_0^2} \\cdot k \\]","title":"6. Optimal Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-range-vs-launch-angle","text":"\\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] Key Insights: Launch Angle: Max range at \\(\\theta = 45^\\circ\\) Symmetry: \\(R(\\theta) = R(90^\\circ - \\theta)\\) Initial Velocity: \\(R \\propto v_0^2\\) Gravity: \\(R \\propto \\frac{1}{g}\\) Initial Height \\(y_0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2gy_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\]","title":"1.2 Range vs. Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-observations-from-graphs","text":"Increasing \\(v_0\\) raises both peak and range. Higher \\(y_0\\) shifts optimal angle below \\(45^\\circ\\) .","title":"3. Observations from Graphs"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-limitations-extensions","text":"Limitations: No air resistance No wind Flat terrain Possible Extensions: Drag force: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Wind effects * Numerical models","title":"4. Limitations &amp; Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-conclusion","text":"Max range at \\(45^\\circ\\) Higher \\(v_0\\) \u2192 longer range Higher \\(y_0\\) \u2192 optimal angle < \\(45^\\circ\\) Lower gravity \u2192 longer range","title":"5. Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-angle-vs-range-analysis","text":"Projectile motion is governed by: \\[ F = ma \\] Equations of Motion: Horizontal: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ * Vertical: $$ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time of Flight (if \\(y_0 = 0\\) ): \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] Range: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2 g y_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\]","title":"1.3 Angle vs. Range Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#applications","text":"Sports: Optimal shots in basketball, soccer, golf. Military: Artillery, missiles. Aerospace: Planetary landing, satellite launches.","title":"Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-further-work","text":"Limits: No drag No wind Level ground Future Improvements: Include air resistance: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Simulate wind effects * Use numerical methods","title":"Limitations &amp; Further Work"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2: Forced Damped Pendulum 1.1 Theoretical Foundation \u2705 Differential Equation: The motion of a forced damped pendulum is governed by: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles \\(\\theta \\approx \\sin(\\theta)\\) , it simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] 2.1.2 Analysis of Dynamics This is the nonlinear form of the differential equation (no approximation): \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Used to study chaotic motion and resonance behavior in the full system. 2.1.3 Practical Applications Simulations of real-world systems (e.g., mechanical oscillators) can be modeled using the same equation : \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Parameters (\u03b2, \u03c9\u2080, A, \u03c9) are varied to reflect different scenarios. 2.1.4 Phase Portrait & Poincar\u00e9 Section We analyze system dynamics using: Phase Portraits: \\(\\theta\\) vs. \\(\\dot{\\theta}\\) Poincar\u00e9 Sections: sampled state at regular intervals Governing equation (nonlinear form) again: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\]","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2-forced-damped-pendulum","text":"","title":"Problem 2: Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-theoretical-foundation","text":"","title":"1.1 Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation","text":"The motion of a forced damped pendulum is governed by: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles \\(\\theta \\approx \\sin(\\theta)\\) , it simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\]","title":"\u2705 Differential Equation:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#212-analysis-of-dynamics","text":"This is the nonlinear form of the differential equation (no approximation): \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Used to study chaotic motion and resonance behavior in the full system.","title":"2.1.2 Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#213-practical-applications","text":"Simulations of real-world systems (e.g., mechanical oscillators) can be modeled using the same equation : \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Parameters (\u03b2, \u03c9\u2080, A, \u03c9) are varied to reflect different scenarios.","title":"2.1.3 Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#214-phase-portrait-poincare-section","text":"We analyze system dynamics using: Phase Portraits: \\(\\theta\\) vs. \\(\\dot{\\theta}\\) Poincar\u00e9 Sections: sampled state at regular intervals Governing equation (nonlinear form) again: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\]","title":"2.1.4 Phase Portrait &amp; Poincar\u00e9 Section"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"\u018fla! A\u015fa\u011f\u0131da s\u0259nin ist\u0259diyin kimi 4 \u0259sas task ba\u015fl\u0131\u011f\u0131 il\u0259, h\u0259r biri \u0259vv\u0259l riyazi izah , sonra is\u0259 Python kod n\u00fcmun\u0259si daxil olmaqla t\u0259qdim olunub. H\u0259r ba\u015fl\u0131q tam d\u0259qiq, b\u00f6y\u00fck h\u0259rfl\u0259rl\u0259 verilib. \ud83e\ude90 GRAVITY \u2013 PROBLEM 1 ORBITAL PERIOD AND ORBITAL RADIUS \u2705 1. DERIVE THE RELATIONSHIP BETWEEN THE SQUARE OF THE ORBITAL PERIOD AND THE CUBE OF THE ORBITAL RADIUS FOR CIRCULAR ORBITS \ud83d\udcd0 Mathematical Derivation: According to Newton\u2019s Law of Gravitation and circular motion: Gravitational Force: \\[ F = \\frac{G M m}{r^2} \\] Centripetal Force: \\[ F = \\frac{m v^2}{r} \\] Equating them: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\Rightarrow v^2 = \\frac{G M}{r} \\] Orbital Period: \\[ T = \\frac{2\\pi r}{v} \\Rightarrow T^2 = \\frac{4\\pi^2 r^2}{v^2} = \\frac{4\\pi^2 r^3}{G M} \\] \u2705 Final form of Kepler's Third Law : \\[ T^2 \\propto r^3 \\] \ud83d\udcbb Python Code: import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # Gravitational constant M = 5.972e24 # Mass of Earth (kg) radii = np.linspace(1e7, 5e7, 100) # Orbit radius in meters periods_squared = (4 * np.pi**2 * radii**3) / (G * M) plt.plot(radii, periods_squared) plt.xlabel(\"Orbital Radius (m)\") plt.ylabel(\"Orbital Period\u00b2 (s\u00b2)\") plt.title(\"T\u00b2 vs r\u00b3 \u2014 Kepler\u2019s Third Law\") plt.grid(True) plt.show() \u2705 2. DISCUSS THE IMPLICATIONS OF THIS RELATIONSHIP FOR ASTRONOMY, INCLUDING ITS ROLE IN CALCULATING PLANETARY MASSES AND DISTANCES \ud83d\udcd0 Key Ideas: If we know the orbital period and radius , we can compute the mass of the central body using: $$ M = \\frac{4\\pi^2 r^3}{G T^2} $$ Used to: Calculate mass of the Sun (from Earth\u2019s orbit) Estimate distances in exoplanet systems Analyze binary star systems \ud83d\udcbb Python Code Example \u2013 Estimating Earth Mass: T = 86400 # 1 day in seconds r = 4.2164e7 # approx. GEO satellite distance (m) M_estimated = (4 * np.pi**2 * r**3) / (G * T**2) print(f\"Estimated Earth mass: {M_estimated:.2e} kg\") \u2705 3. ANALYZE REAL-WORLD EXAMPLES, SUCH AS THE MOON'S ORBIT AROUND EARTH OR THE ORBITS OF PLANETS IN THE SOLAR SYSTEM \ud83d\udcd0 Example \u2013 Moon's Orbit: Radius: \\(r = 3.84 \\times 10^8 \\, \\text{m}\\) Period: \\(T = 27.3 \\, \\text{days} = 2.36 \\times 10^6 \\, \\text{s}\\) Check if Kepler\u2019s law holds: \\[ \\frac{T^2}{r^3} = \\text{constant} \\] \ud83d\udcbb Python Code: T_moon = 2.36e6 r_moon = 3.84e8 kepler_ratio = T_moon**2 / r_moon**3 print(f\"T\u00b2 / r\u00b3 for Moon: {kepler_ratio:.3e}\") You can repeat this with planets using NASA ephemerides to verify the law across the Solar System. \u2705 4. IMPLEMENT A COMPUTATIONAL MODEL TO SIMULATE CIRCULAR ORBITS AND VERIFY THE RELATIONSHIP \ud83d\udcd0 Idea: Simulate bodies in circular orbits using Newton\u2019s law, measure periods, and compare \\(T^2\\) vs \\(r^3\\) . \ud83d\udcbb Python Code: def simulate_orbit(radius, steps=1000): v = np.sqrt(G * M / radius) T = 2 * np.pi * radius / v return T radii = np.linspace(1e7, 5e7, 100) T_values = np.array([simulate_orbit(r) for r in radii]) plt.plot(radii**3, T_values**2) plt.xlabel(\"r\u00b3 (m\u00b3)\") plt.ylabel(\"T\u00b2 (s\u00b2)\") plt.title(\"Simulated Verification of Kepler\u2019s 3rd Law\") plt.grid(True) plt.show() \u018fla! A\u015fa\u011f\u0131da tam olaraq \u0259vv\u0259lki strukturda \u2014 \u0259vv\u0259l riyazi izah , sonra Python kodu , v\u0259 h\u0259r bir hiss\u0259nin ba\u015fl\u0131\u011f\u0131 veril\u0259n kimi B\u00d6Y\u00dcK H\u018fRFL\u018fRL\u018f yaz\u0131lm\u0131\u015f \u015f\u0259kild\u0259 t\u0259qdim olunur. Q\u0131sa v\u0259 ayd\u0131n saxlan\u0131l\u0131b, qrafikl\u0259r v\u0259 n\u00fcmun\u0259l\u0259rl\u0259 d\u0259st\u0259kl\u0259nib. \ud83d\ude80 GRAVITY \u2013 PROBLEM 2 ESCAPE VELOCITIES AND COSMIC VELOCITIES \u2705 1. DEFINE THE FIRST, SECOND, AND THIRD COSMIC VELOCITIES, EXPLAINING THEIR PHYSICAL MEANING \ud83d\udcd0 Definitions: First Cosmic Velocity (Orbital Velocity): Minimum velocity to enter stable circular orbit near a celestial body\u2019s surface. $$ v_1 = \\sqrt{\\frac{G M}{r}} $$ Second Cosmic Velocity (Escape Velocity): Velocity needed to break free from a planet\u2019s gravity (no further propulsion). $$ v_2 = \\sqrt{2} \\cdot v_1 = \\sqrt{\\frac{2GM}{r}} $$ Third Cosmic Velocity: Velocity required to escape the gravitational influence of the entire solar system . Depends on Sun\u2019s gravity and spacecraft's distance from it. \u2705 2. ANALYZE THE MATHEMATICAL DERIVATIONS AND PARAMETERS AFFECTING THESE VELOCITIES \ud83d\udcd0 Derivations: From conservation of energy: \\[ \\text{Kinetic Energy} = \\text{Gravitational Potential Energy} \\] Escape condition: \\[ \\frac{1}{2}mv^2 = \\frac{GMm}{r} \\Rightarrow v = \\sqrt{\\frac{2GM}{r}} \\] Parameters affecting velocity: \\(M\\) \u2192 mass of planet/star \\(r\\) \u2192 distance from center \\(G\\) \u2192 universal constant (fixed) Heavier or denser bodies \u2192 higher escape velocities. \u2705 3. CALCULATE AND VISUALIZE THESE VELOCITIES FOR DIFFERENT CELESTIAL BODIES LIKE EARTH, MARS AND JUPYTER \ud83d\udcbb Python Code: import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Planetary data: name, mass (kg), radius (m) bodies = { \"Earth\": [5.972e24, 6.371e6], \"Mars\": [6.39e23, 3.39e6], \"Jupiter\": [1.898e27, 6.9911e7] } v1, v2 = {}, {} for body, (mass, radius) in bodies.items(): v1[body] = np.sqrt(G * mass / radius) v2[body] = np.sqrt(2 * G * mass / radius) # Plotting labels = list(bodies.keys()) v1_vals = [v1[b] for b in labels] v2_vals = [v2[b] for b in labels] x = np.arange(len(labels)) width = 0.35 plt.bar(x - width/2, v1_vals, width, label='v1 (Orbital)') plt.bar(x + width/2, v2_vals, width, label='v2 (Escape)') plt.xticks(x, labels) plt.ylabel(\"Velocity (m/s)\") plt.title(\"Cosmic Velocities for Different Planets\") plt.legend() plt.grid(True, linestyle='--', alpha=0.5) plt.show() \u2705 4. DISCUSS THEIR IMPORTANCE IN SPACE EXPLORATION, INCLUDING LAUNCHING SATELLITES, MISSIONS TO OTHER PLANETS, AND POTENTIAL INTERSTELLAR TRAVEL \ud83d\ude80 Application Discussion: v1 \u2192 Used to launch satellites into low Earth orbit (LEO) . v2 \u2192 Needed to send probes to Moon, Mars , or deep space. v3 \u2192 Relevant for escaping solar system; e.g., Voyager 1 used gravity assist to exceed v3. Knowing these velocities helps: Optimize fuel and payload Plan gravity assists Design interplanetary and interstellar missions","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#gravity-problem-1","text":"","title":"\ud83e\ude90 GRAVITY \u2013 PROBLEM 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"ORBITAL PERIOD AND ORBITAL RADIUS"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-derive-the-relationship-between-the-square-of-the-orbital-period-and-the-cube-of-the-orbital-radius-for-circular-orbits","text":"","title":"\u2705 1. DERIVE THE RELATIONSHIP BETWEEN THE SQUARE OF THE ORBITAL PERIOD AND THE CUBE OF THE ORBITAL RADIUS FOR CIRCULAR ORBITS"},{"location":"1%20Physics/2%20Gravity/Problem_1/#mathematical-derivation","text":"According to Newton\u2019s Law of Gravitation and circular motion: Gravitational Force: \\[ F = \\frac{G M m}{r^2} \\] Centripetal Force: \\[ F = \\frac{m v^2}{r} \\] Equating them: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\Rightarrow v^2 = \\frac{G M}{r} \\] Orbital Period: \\[ T = \\frac{2\\pi r}{v} \\Rightarrow T^2 = \\frac{4\\pi^2 r^2}{v^2} = \\frac{4\\pi^2 r^3}{G M} \\] \u2705 Final form of Kepler's Third Law : \\[ T^2 \\propto r^3 \\]","title":"\ud83d\udcd0 Mathematical Derivation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-code","text":"import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # Gravitational constant M = 5.972e24 # Mass of Earth (kg) radii = np.linspace(1e7, 5e7, 100) # Orbit radius in meters periods_squared = (4 * np.pi**2 * radii**3) / (G * M) plt.plot(radii, periods_squared) plt.xlabel(\"Orbital Radius (m)\") plt.ylabel(\"Orbital Period\u00b2 (s\u00b2)\") plt.title(\"T\u00b2 vs r\u00b3 \u2014 Kepler\u2019s Third Law\") plt.grid(True) plt.show()","title":"\ud83d\udcbb Python Code:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-discuss-the-implications-of-this-relationship-for-astronomy-including-its-role-in-calculating-planetary-masses-and-distances","text":"","title":"\u2705 2. DISCUSS THE IMPLICATIONS OF THIS RELATIONSHIP FOR ASTRONOMY, INCLUDING ITS ROLE IN CALCULATING PLANETARY MASSES AND DISTANCES"},{"location":"1%20Physics/2%20Gravity/Problem_1/#key-ideas","text":"If we know the orbital period and radius , we can compute the mass of the central body using: $$ M = \\frac{4\\pi^2 r^3}{G T^2} $$ Used to: Calculate mass of the Sun (from Earth\u2019s orbit) Estimate distances in exoplanet systems Analyze binary star systems","title":"\ud83d\udcd0 Key Ideas:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-code-example-estimating-earth-mass","text":"T = 86400 # 1 day in seconds r = 4.2164e7 # approx. GEO satellite distance (m) M_estimated = (4 * np.pi**2 * r**3) / (G * T**2) print(f\"Estimated Earth mass: {M_estimated:.2e} kg\")","title":"\ud83d\udcbb Python Code Example \u2013 Estimating Earth Mass:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-analyze-real-world-examples-such-as-the-moons-orbit-around-earth-or-the-orbits-of-planets-in-the-solar-system","text":"","title":"\u2705 3. ANALYZE REAL-WORLD EXAMPLES, SUCH AS THE MOON'S ORBIT AROUND EARTH OR THE ORBITS OF PLANETS IN THE SOLAR SYSTEM"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-moons-orbit","text":"Radius: \\(r = 3.84 \\times 10^8 \\, \\text{m}\\) Period: \\(T = 27.3 \\, \\text{days} = 2.36 \\times 10^6 \\, \\text{s}\\) Check if Kepler\u2019s law holds: \\[ \\frac{T^2}{r^3} = \\text{constant} \\]","title":"\ud83d\udcd0 Example \u2013 Moon's Orbit:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-code_1","text":"T_moon = 2.36e6 r_moon = 3.84e8 kepler_ratio = T_moon**2 / r_moon**3 print(f\"T\u00b2 / r\u00b3 for Moon: {kepler_ratio:.3e}\") You can repeat this with planets using NASA ephemerides to verify the law across the Solar System.","title":"\ud83d\udcbb Python Code:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-implement-a-computational-model-to-simulate-circular-orbits-and-verify-the-relationship","text":"","title":"\u2705 4. IMPLEMENT A COMPUTATIONAL MODEL TO SIMULATE CIRCULAR ORBITS AND VERIFY THE RELATIONSHIP"},{"location":"1%20Physics/2%20Gravity/Problem_1/#idea","text":"Simulate bodies in circular orbits using Newton\u2019s law, measure periods, and compare \\(T^2\\) vs \\(r^3\\) .","title":"\ud83d\udcd0 Idea:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-code_2","text":"def simulate_orbit(radius, steps=1000): v = np.sqrt(G * M / radius) T = 2 * np.pi * radius / v return T radii = np.linspace(1e7, 5e7, 100) T_values = np.array([simulate_orbit(r) for r in radii]) plt.plot(radii**3, T_values**2) plt.xlabel(\"r\u00b3 (m\u00b3)\") plt.ylabel(\"T\u00b2 (s\u00b2)\") plt.title(\"Simulated Verification of Kepler\u2019s 3rd Law\") plt.grid(True) plt.show() \u018fla! A\u015fa\u011f\u0131da tam olaraq \u0259vv\u0259lki strukturda \u2014 \u0259vv\u0259l riyazi izah , sonra Python kodu , v\u0259 h\u0259r bir hiss\u0259nin ba\u015fl\u0131\u011f\u0131 veril\u0259n kimi B\u00d6Y\u00dcK H\u018fRFL\u018fRL\u018f yaz\u0131lm\u0131\u015f \u015f\u0259kild\u0259 t\u0259qdim olunur. Q\u0131sa v\u0259 ayd\u0131n saxlan\u0131l\u0131b, qrafikl\u0259r v\u0259 n\u00fcmun\u0259l\u0259rl\u0259 d\u0259st\u0259kl\u0259nib.","title":"\ud83d\udcbb Python Code:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#gravity-problem-2","text":"","title":"\ud83d\ude80 GRAVITY \u2013 PROBLEM 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/#escape-velocities-and-cosmic-velocities","text":"","title":"ESCAPE VELOCITIES AND COSMIC VELOCITIES"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-define-the-first-second-and-third-cosmic-velocities-explaining-their-physical-meaning","text":"","title":"\u2705 1. DEFINE THE FIRST, SECOND, AND THIRD COSMIC VELOCITIES, EXPLAINING THEIR PHYSICAL MEANING"},{"location":"1%20Physics/2%20Gravity/Problem_1/#definitions","text":"First Cosmic Velocity (Orbital Velocity): Minimum velocity to enter stable circular orbit near a celestial body\u2019s surface. $$ v_1 = \\sqrt{\\frac{G M}{r}} $$ Second Cosmic Velocity (Escape Velocity): Velocity needed to break free from a planet\u2019s gravity (no further propulsion). $$ v_2 = \\sqrt{2} \\cdot v_1 = \\sqrt{\\frac{2GM}{r}} $$ Third Cosmic Velocity: Velocity required to escape the gravitational influence of the entire solar system . Depends on Sun\u2019s gravity and spacecraft's distance from it.","title":"\ud83d\udcd0 Definitions:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-analyze-the-mathematical-derivations-and-parameters-affecting-these-velocities","text":"","title":"\u2705 2. ANALYZE THE MATHEMATICAL DERIVATIONS AND PARAMETERS AFFECTING THESE VELOCITIES"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivations","text":"From conservation of energy: \\[ \\text{Kinetic Energy} = \\text{Gravitational Potential Energy} \\] Escape condition: \\[ \\frac{1}{2}mv^2 = \\frac{GMm}{r} \\Rightarrow v = \\sqrt{\\frac{2GM}{r}} \\] Parameters affecting velocity: \\(M\\) \u2192 mass of planet/star \\(r\\) \u2192 distance from center \\(G\\) \u2192 universal constant (fixed) Heavier or denser bodies \u2192 higher escape velocities.","title":"\ud83d\udcd0 Derivations:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-calculate-and-visualize-these-velocities-for-different-celestial-bodies-like-earth-mars-and-jupyter","text":"","title":"\u2705 3. CALCULATE AND VISUALIZE THESE VELOCITIES FOR DIFFERENT CELESTIAL BODIES LIKE EARTH, MARS AND JUPYTER"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-code_3","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Planetary data: name, mass (kg), radius (m) bodies = { \"Earth\": [5.972e24, 6.371e6], \"Mars\": [6.39e23, 3.39e6], \"Jupiter\": [1.898e27, 6.9911e7] } v1, v2 = {}, {} for body, (mass, radius) in bodies.items(): v1[body] = np.sqrt(G * mass / radius) v2[body] = np.sqrt(2 * G * mass / radius) # Plotting labels = list(bodies.keys()) v1_vals = [v1[b] for b in labels] v2_vals = [v2[b] for b in labels] x = np.arange(len(labels)) width = 0.35 plt.bar(x - width/2, v1_vals, width, label='v1 (Orbital)') plt.bar(x + width/2, v2_vals, width, label='v2 (Escape)') plt.xticks(x, labels) plt.ylabel(\"Velocity (m/s)\") plt.title(\"Cosmic Velocities for Different Planets\") plt.legend() plt.grid(True, linestyle='--', alpha=0.5) plt.show()","title":"\ud83d\udcbb Python Code:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#_1","text":"","title":""},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-discuss-their-importance-in-space-exploration-including-launching-satellites-missions-to-other-planets-and-potential-interstellar-travel","text":"","title":"\u2705 4. DISCUSS THEIR IMPORTANCE IN SPACE EXPLORATION, INCLUDING LAUNCHING SATELLITES, MISSIONS TO OTHER PLANETS, AND POTENTIAL INTERSTELLAR TRAVEL"},{"location":"1%20Physics/2%20Gravity/Problem_1/#application-discussion","text":"v1 \u2192 Used to launch satellites into low Earth orbit (LEO) . v2 \u2192 Needed to send probes to Moon, Mars , or deep space. v3 \u2192 Relevant for escaping solar system; e.g., Voyager 1 used gravity assist to exceed v3. Knowing these velocities helps: Optimize fuel and payload Plan gravity assists Design interplanetary and interstellar missions","title":"\ud83d\ude80 Application Discussion:"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Sure! Here's your simplified and clean version of the Cosmic Velocities topic in English : \ud83d\ude80 Cosmic Velocities \u2014 Simple Explanation 1\ufe0f\u20e3 First Cosmic Velocity (v\u2081) \u2014 To Enter Orbit The minimum horizontal speed needed for a body to enter a stable circular orbit around a planet. Formula: $$ v\u2081 = \\sqrt{\\frac{GM}{r}} $$ 2\ufe0f\u20e3 Second Cosmic Velocity (v\u2082) \u2014 To Escape Gravity The speed required to completely escape a planet\u2019s gravitational pull. Formula: $$ v\u2082 = \\sqrt{\\frac{2GM}{r}} = \\sqrt{2} \\cdot v\u2081 $$ 3\ufe0f\u20e3 Third Cosmic Velocity (v\u2083) \u2014 To Leave the Solar System The speed required to escape the Sun's gravity from Earth\u2019s orbit. Approximate Formula: $$ v\u2083 = \\sqrt{v\u2082^2 + v_{\\text{earth orbit}}^2} $$ \ud83c\udf0d Example Calculations (Python Code) import numpy as np G = 6.67430e-11 # Gravitational constant v_earth_orbit = 29.78e3 # Earth's orbital speed (m/s) planets = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.390e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.991e7} } for name, data in planets.items(): M = data[\"mass\"] r = data[\"radius\"] v1 = np.sqrt(G * M / r) v2 = np.sqrt(2 * G * M / r) if name == \"Earth\": v3 = np.sqrt(v2**2 + v_earth_orbit**2) print(f\"{name}: v\u2081={v1/1000:.2f} km/s, v\u2082={v2/1000:.2f} km/s, v\u2083={v3/1000:.2f} km/s\") else: print(f\"{name}: v\u2081={v1/1000:.2f} km/s, v\u2082={v2/1000:.2f} km/s\") \ud83d\udccc What These Velocities Mean Velocity Use Case v\u2081 Placing satellites into orbit (e.g., GPS, ISS) v\u2082 Interplanetary missions (e.g., Mars rovers) v\u2083 Escaping the solar system (e.g., Voyager 1 probe) \ud83d\udd0d Test Example: Classify a Given Launch Speed def classify_velocity(v_launch): if v_launch < 7910: return \"Not enough to orbit \u2014 falls back to Earth\" elif 7910 <= v_launch < 11190: return \"Achieves Earth orbit\" elif 11190 <= v_launch < 42100: return \"Escapes Earth's gravity\" else: return \"Exits the Solar System\" for v in [3000, 7900, 11200, 45000]: print(f\"{v/1000:.1f} km/s \u2192 {classify_velocity(v)}\") Would you like me to format this as a downloadable PDF or Word document ?","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#cosmic-velocities-simple-explanation","text":"","title":"\ud83d\ude80 Cosmic Velocities \u2014 Simple Explanation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-first-cosmic-velocity-v1-to-enter-orbit","text":"The minimum horizontal speed needed for a body to enter a stable circular orbit around a planet. Formula: $$ v\u2081 = \\sqrt{\\frac{GM}{r}} $$","title":"1\ufe0f\u20e3 First Cosmic Velocity (v\u2081) \u2014 To Enter Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-second-cosmic-velocity-v2-to-escape-gravity","text":"The speed required to completely escape a planet\u2019s gravitational pull. Formula: $$ v\u2082 = \\sqrt{\\frac{2GM}{r}} = \\sqrt{2} \\cdot v\u2081 $$","title":"2\ufe0f\u20e3 Second Cosmic Velocity (v\u2082) \u2014 To Escape Gravity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-third-cosmic-velocity-v3-to-leave-the-solar-system","text":"The speed required to escape the Sun's gravity from Earth\u2019s orbit. Approximate Formula: $$ v\u2083 = \\sqrt{v\u2082^2 + v_{\\text{earth orbit}}^2} $$","title":"3\ufe0f\u20e3 Third Cosmic Velocity (v\u2083) \u2014 To Leave the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-calculations-python-code","text":"import numpy as np G = 6.67430e-11 # Gravitational constant v_earth_orbit = 29.78e3 # Earth's orbital speed (m/s) planets = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.390e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.991e7} } for name, data in planets.items(): M = data[\"mass\"] r = data[\"radius\"] v1 = np.sqrt(G * M / r) v2 = np.sqrt(2 * G * M / r) if name == \"Earth\": v3 = np.sqrt(v2**2 + v_earth_orbit**2) print(f\"{name}: v\u2081={v1/1000:.2f} km/s, v\u2082={v2/1000:.2f} km/s, v\u2083={v3/1000:.2f} km/s\") else: print(f\"{name}: v\u2081={v1/1000:.2f} km/s, v\u2082={v2/1000:.2f} km/s\")","title":"\ud83c\udf0d Example Calculations (Python Code)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#what-these-velocities-mean","text":"Velocity Use Case v\u2081 Placing satellites into orbit (e.g., GPS, ISS) v\u2082 Interplanetary missions (e.g., Mars rovers) v\u2083 Escaping the solar system (e.g., Voyager 1 probe)","title":"\ud83d\udccc What These Velocities Mean"},{"location":"1%20Physics/2%20Gravity/Problem_2/#test-example-classify-a-given-launch-speed","text":"def classify_velocity(v_launch): if v_launch < 7910: return \"Not enough to orbit \u2014 falls back to Earth\" elif 7910 <= v_launch < 11190: return \"Achieves Earth orbit\" elif 11190 <= v_launch < 42100: return \"Escapes Earth's gravity\" else: return \"Exits the Solar System\" for v in [3000, 7900, 11200, 45000]: print(f\"{v/1000:.1f} km/s \u2192 {classify_velocity(v)}\") Would you like me to format this as a downloadable PDF or Word document ?","title":"\ud83d\udd0d Test Example: Classify a Given Launch Speed"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Here\u2019s a clean, simplified, and fully English version of the material you provided on Gravitational Motion and Trajectories , ideal for a project, study guide, or explanation: \ud83c\udf0d Problem 3 \u2014 Gravitational Motion and Space Trajectories 3.1 Newton\u2019s Law of Gravitation The gravitational force acting between Earth and a payload (e.g., a spacecraft or satellite) is: \\[ F = \\frac{GMm}{r^2} \\] \\(G\\) \u2013 Gravitational constant: \\(6.67430 \\times 10^{-11} \\ \\mathrm{m^3 \\cdot kg^{-1} \\cdot s^{-2}}\\) \\(M\\) \u2013 Mass of Earth: \\(5.972 \\times 10^{24} \\ \\mathrm{kg}\\) \\(m\\) \u2013 Mass of the object/payload \\(r\\) \u2013 Distance from the center of the Earth 3.1.1 Conservation of Mechanical Energy The total mechanical energy \\(E\\) (kinetic + potential) of a payload in motion is: \\[ E = \\frac{1}{2}mv^2 - \\frac{GMm}{r} \\] \\(v\\) : Speed of the object \\(r\\) : Distance from Earth\u2019s center \ud83d\ude80 Trajectory Types Based on Energy 1. Parabolic Trajectory \u2013 Escape velocity Total Energy \\(E = 0\\) Condition: $$ \\frac{1}{2}mv^2 = \\frac{GMm}{r} $$ * Follows a parabolic path; just escapes Earth\u2019s gravity. 2. Elliptical Orbit Total Energy \\(E < 0\\) Equation: $$ E = -\\frac{GMm}{2a} $$ * \\(a\\) : Semi-major axis of the elliptical orbit 3. Hyperbolic Trajectory Total Energy \\(E > 0\\) Object escapes Earth\u2019s gravity at high speed. 3.1.2 Mathematical Model (Force and Acceleration) Using Newton\u2019s Second Law and Universal Gravitation : \\[ \\vec{a} = -\\frac{GM}{r^3} \\vec{r} \\] Where: \\(\\vec{a}\\) : Acceleration vector \\(\\vec{r}\\) : Position vector \\(r = \\sqrt{x^2 + y^2}\\) This is a central force problem , often solved using numerical methods like Euler or Runge-Kutta. 3.1.3 \ud83d\ude80 Real-World Trajectories Trajectory Type Required Speed (from LEO) Real-World Example Suborbital < 7.8 km/s Blue Origin space tourism Orbital (Circular) \u2248 7.8 km/s Satellites, ISS Elliptical Orbit 7.8 \u2013 11.2 km/s Geostationary satellites, transfer orbits Escape (Hyperbolic) > 11.2 km/s Voyager, Mars rovers LEO : Low Earth Orbit ISS : International Space Station 3.1.4 \u2705 Key Equations Newton\u2019s Law of Gravitation (Vector Form): \\[ \\vec{F}_g = -\\frac{GMm}{r^2} \\hat{r} \\] \\(\\hat{r}\\) : Unit vector in radial direction Negative sign means the force is attractive (toward Earth) Newton\u2019s Second Law: \\[ \\vec{a} = \\frac{\\vec{F}}{m} = -\\frac{GM}{r^3} \\vec{r} \\] Equations of Motion (2D Form): \\[ \\frac{d^2x}{dt^2} = -\\frac{GMx}{(x^2 + y^2)^{3/2}}, \\quad \\frac{d^2y}{dt^2} = -\\frac{GMy}{(x^2 + y^2)^{3/2}} \\] These are solved using numerical methods (e.g., Euler integration) in Python simulations. \ud83d\udcc8 Visualization: Numerical simulations can visualize trajectories like: Arcs (suborbital) Circles and ellipses (orbital) Hyperbolas (escape) Would you like this formatted into a PDF or PowerPoint presentation ?","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3-gravitational-motion-and-space-trajectories","text":"","title":"\ud83c\udf0d Problem 3 \u2014 Gravitational Motion and Space Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#31-newtons-law-of-gravitation","text":"The gravitational force acting between Earth and a payload (e.g., a spacecraft or satellite) is: \\[ F = \\frac{GMm}{r^2} \\] \\(G\\) \u2013 Gravitational constant: \\(6.67430 \\times 10^{-11} \\ \\mathrm{m^3 \\cdot kg^{-1} \\cdot s^{-2}}\\) \\(M\\) \u2013 Mass of Earth: \\(5.972 \\times 10^{24} \\ \\mathrm{kg}\\) \\(m\\) \u2013 Mass of the object/payload \\(r\\) \u2013 Distance from the center of the Earth","title":"3.1 Newton\u2019s Law of Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#311-conservation-of-mechanical-energy","text":"The total mechanical energy \\(E\\) (kinetic + potential) of a payload in motion is: \\[ E = \\frac{1}{2}mv^2 - \\frac{GMm}{r} \\] \\(v\\) : Speed of the object \\(r\\) : Distance from Earth\u2019s center","title":"3.1.1 Conservation of Mechanical Energy"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectory-types-based-on-energy","text":"","title":"\ud83d\ude80 Trajectory Types Based on Energy"},{"location":"1%20Physics/2%20Gravity/Problem_3/#1-parabolic-trajectory-escape-velocity","text":"Total Energy \\(E = 0\\) Condition: $$ \\frac{1}{2}mv^2 = \\frac{GMm}{r} $$ * Follows a parabolic path; just escapes Earth\u2019s gravity.","title":"1. Parabolic Trajectory \u2013 Escape velocity"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-elliptical-orbit","text":"Total Energy \\(E < 0\\) Equation: $$ E = -\\frac{GMm}{2a} $$ * \\(a\\) : Semi-major axis of the elliptical orbit","title":"2. Elliptical Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-hyperbolic-trajectory","text":"Total Energy \\(E > 0\\) Object escapes Earth\u2019s gravity at high speed.","title":"3. Hyperbolic Trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_3/#312-mathematical-model-force-and-acceleration","text":"Using Newton\u2019s Second Law and Universal Gravitation : \\[ \\vec{a} = -\\frac{GM}{r^3} \\vec{r} \\] Where: \\(\\vec{a}\\) : Acceleration vector \\(\\vec{r}\\) : Position vector \\(r = \\sqrt{x^2 + y^2}\\) This is a central force problem , often solved using numerical methods like Euler or Runge-Kutta.","title":"3.1.2 Mathematical Model (Force and Acceleration)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#313-real-world-trajectories","text":"Trajectory Type Required Speed (from LEO) Real-World Example Suborbital < 7.8 km/s Blue Origin space tourism Orbital (Circular) \u2248 7.8 km/s Satellites, ISS Elliptical Orbit 7.8 \u2013 11.2 km/s Geostationary satellites, transfer orbits Escape (Hyperbolic) > 11.2 km/s Voyager, Mars rovers LEO : Low Earth Orbit ISS : International Space Station","title":"3.1.3 \ud83d\ude80 Real-World Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#314-key-equations","text":"","title":"3.1.4 \u2705 Key Equations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#newtons-law-of-gravitation-vector-form","text":"\\[ \\vec{F}_g = -\\frac{GMm}{r^2} \\hat{r} \\] \\(\\hat{r}\\) : Unit vector in radial direction Negative sign means the force is attractive (toward Earth)","title":"Newton\u2019s Law of Gravitation (Vector Form):"},{"location":"1%20Physics/2%20Gravity/Problem_3/#newtons-second-law","text":"\\[ \\vec{a} = \\frac{\\vec{F}}{m} = -\\frac{GM}{r^3} \\vec{r} \\]","title":"Newton\u2019s Second Law:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion-2d-form","text":"\\[ \\frac{d^2x}{dt^2} = -\\frac{GMx}{(x^2 + y^2)^{3/2}}, \\quad \\frac{d^2y}{dt^2} = -\\frac{GMy}{(x^2 + y^2)^{3/2}} \\] These are solved using numerical methods (e.g., Euler integration) in Python simulations.","title":"Equations of Motion (2D Form):"},{"location":"1%20Physics/2%20Gravity/Problem_3/#visualization","text":"Numerical simulations can visualize trajectories like: Arcs (suborbital) Circles and ellipses (orbital) Hyperbolas (escape) Would you like this formatted into a PDF or PowerPoint presentation ?","title":"\ud83d\udcc8 Visualization:"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"\u018fla! S\u0259n dediyin kimi, sad\u0259c\u0259 ba\u015fl\u0131\u011f\u0131 d\u0259yi\u015fib, s\u0259nin verdiyin formada yaz\u0131ram. Qalan hiss\u0259ni oldu\u011fu kimi saxlay\u0131ram: Task Options: Option 1: Simplified Task \u2013 Algorithm Description Describe the algorithm for calculating the equivalent resistance using graph theory. Provide the pseudocode that: Identifies series and parallel connections. Iteratively reduces the graph until a single equivalent resistance is obtained. Includes a clear explanation of how the algorithm handles nested combinations. \ud83d\udd39 1. Identifying Series and Parallel Connections Series Rule: If a node connects exactly two resistors and no other components, they are in series . \\[ R_{\\text{eq}} = R_1 + R_2 \\] Parallel Rule: If two or more resistors connect the same pair of nodes , they are in parallel . \\[ \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} \\] Pseudocode: For each node: If degree == 2 and only resistors: Combine as series For each pair of nodes: If multiple resistors: Combine as parallel \ud83d\udd39 2. Iterative Reduction Repeat simplifications until only one equivalent resistor remains between the input and output nodes. Pseudocode: while graph has more than 2 nodes: simplify series simplify parallel \ud83d\udd39 3. Handling Nested Combinations Use recursive reduction on subgraphs or inner groups. Example: If (R1 || R2) is in series with R3: \\[ R_{\\text{eq}} = \\left(\\frac{1}{R_1} + \\frac{1}{R_2}\\right)^{-1} + R_3 \\] Pseudocode: function reduce(graph): if no nested groups: return equivalent else: simplify inner group replace with one resistor repeat Haz\u0131rsan, ist\u0259s\u0259n Option 2-y\u0259 d\u0259 ke\u00e7\u0259 bil\u0259rik v\u0259 ya bu hiss\u0259nin kod versiyas\u0131n\u0131 yaza bil\u0259r\u0259m.","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#task-options","text":"","title":"Task Options:"},{"location":"1%20Physics/3%20Waves/Problem_1/#option-1-simplified-task-algorithm-description","text":"Describe the algorithm for calculating the equivalent resistance using graph theory. Provide the pseudocode that: Identifies series and parallel connections. Iteratively reduces the graph until a single equivalent resistance is obtained. Includes a clear explanation of how the algorithm handles nested combinations.","title":"Option 1: Simplified Task \u2013 Algorithm Description"},{"location":"1%20Physics/3%20Waves/Problem_1/#1-identifying-series-and-parallel-connections","text":"Series Rule: If a node connects exactly two resistors and no other components, they are in series . \\[ R_{\\text{eq}} = R_1 + R_2 \\] Parallel Rule: If two or more resistors connect the same pair of nodes , they are in parallel . \\[ \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} \\] Pseudocode: For each node: If degree == 2 and only resistors: Combine as series For each pair of nodes: If multiple resistors: Combine as parallel","title":"\ud83d\udd39 1. Identifying Series and Parallel Connections"},{"location":"1%20Physics/3%20Waves/Problem_1/#2-iterative-reduction","text":"Repeat simplifications until only one equivalent resistor remains between the input and output nodes. Pseudocode: while graph has more than 2 nodes: simplify series simplify parallel","title":"\ud83d\udd39 2. Iterative Reduction"},{"location":"1%20Physics/3%20Waves/Problem_1/#3-handling-nested-combinations","text":"Use recursive reduction on subgraphs or inner groups. Example: If (R1 || R2) is in series with R3: \\[ R_{\\text{eq}} = \\left(\\frac{1}{R_1} + \\frac{1}{R_2}\\right)^{-1} + R_3 \\] Pseudocode: function reduce(graph): if no nested groups: return equivalent else: simplify inner group replace with one resistor repeat Haz\u0131rsan, ist\u0259s\u0259n Option 2-y\u0259 d\u0259 ke\u00e7\u0259 bil\u0259rik v\u0259 ya bu hiss\u0259nin kod versiyas\u0131n\u0131 yaza bil\u0259r\u0259m.","title":"\ud83d\udd39 3. Handling Nested Combinations"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Certainly! Here's your phrased and academically styled version of the electromagnetic problem text, with a clear structure, natural flow, and no change to the technical or mathematical content: Problem 1: Motion of a Charged Particle in a Magnetic Field 1.1 Electromagnetism \u2013 Mathematical Formulation The motion of a charged particle in electromagnetic fields is governed by the Lorentz force law, which is expressed as: \\[ \\vec{F} = q (\\vec{E} + \\vec{v} \\times \\vec{B}) \\] Here: \\(\\vec{F}\\) is the total electromagnetic force acting on the particle, \\(q\\) is the electric charge of the particle, \\(\\vec{E}\\) is the electric field vector, \\(\\vec{v}\\) is the velocity of the particle, \\(\\vec{B}\\) is the magnetic field vector, and \\(\\times\\) denotes the vector (cross) product. In the specific scenario where the electric field is absent (i.e., \\(\\vec{E} = 0\\) ), the force reduces to: \\[ \\vec{F} = q (\\vec{v} \\times \\vec{B}) \\] According to Newton's second law of motion , this force results in the following differential equation: \\[ m \\frac{d\\vec{v}}{dt} = q (\\vec{v} \\times \\vec{B}) \\] where \\(m\\) is the mass of the particle. This equation describes circular motion when the velocity vector is initially perpendicular to the magnetic field. The magnetic force, acting as a centripetal force, continuously changes the direction of the velocity while maintaining its magnitude, resulting in uniform circular motion. Let me know if you'd like this continued for more sections or if you want this compiled into a formatted document!","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1-motion-of-a-charged-particle-in-a-magnetic-field","text":"","title":"Problem 1: Motion of a Charged Particle in a Magnetic Field"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#11-electromagnetism-mathematical-formulation","text":"The motion of a charged particle in electromagnetic fields is governed by the Lorentz force law, which is expressed as: \\[ \\vec{F} = q (\\vec{E} + \\vec{v} \\times \\vec{B}) \\] Here: \\(\\vec{F}\\) is the total electromagnetic force acting on the particle, \\(q\\) is the electric charge of the particle, \\(\\vec{E}\\) is the electric field vector, \\(\\vec{v}\\) is the velocity of the particle, \\(\\vec{B}\\) is the magnetic field vector, and \\(\\times\\) denotes the vector (cross) product. In the specific scenario where the electric field is absent (i.e., \\(\\vec{E} = 0\\) ), the force reduces to: \\[ \\vec{F} = q (\\vec{v} \\times \\vec{B}) \\] According to Newton's second law of motion , this force results in the following differential equation: \\[ m \\frac{d\\vec{v}}{dt} = q (\\vec{v} \\times \\vec{B}) \\] where \\(m\\) is the mass of the particle. This equation describes circular motion when the velocity vector is initially perpendicular to the magnetic field. The magnetic force, acting as a centripetal force, continuously changes the direction of the velocity while maintaining its magnitude, resulting in uniform circular motion. Let me know if you'd like this continued for more sections or if you want this compiled into a formatted document!","title":"1.1 Electromagnetism \u2013 Mathematical Formulation"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Great! Here's your complete solution, with the headings updated to match the four sections from your image: \ud83c\udf1f Complete Solution: Lorentz Force Simulation and Applications \u2705 1. Exploration of Applications \ud83d\udd38 Mathematical Basis: The Lorentz force governs the motion of a charged particle in electromagnetic fields: \\[ \\vec{F} = q(\\vec{E} + \\vec{v} \\times \\vec{B}) \\] Using Newton\u2019s second law: \\[ m \\frac{d\\vec{v}}{dt} = q(\\vec{E} + \\vec{v} \\times \\vec{B}) \\] This leads to circular, helical, or drift motion based on the field and velocity configuration. \ud83d\udd38 Real-World Applications: System Role of Lorentz Force Cyclotron Circular acceleration of charged particles in $\\vec{B}$ field Mass Spectrometer Deflection reveals mass-to-charge ratio Plasma Confinement Magnetic fields trap charged particles in devices like Tokamaks Space Physics Earth's magnetic field deflects solar wind, cosmic rays \u2705 2. Simulated Particle Motion \ud83d\udd38 Mathematical Model: Assume a uniform magnetic field and zero electric field: \\[ \\vec{E} = 0, \\quad \\vec{F} = q (\\vec{v} \\times \\vec{B}) \\] This results in: Circular motion if $\\vec{v} \\perp \\vec{B}$ Helical motion if $\\vec{v}$ has a component along $\\vec{B}$ \u2705 3. Parameter Exploration We vary the following parameters to observe their effects: Electric and Magnetic Fields: $\\vec{E}$, $\\vec{B}$ Charge and Mass: $q$, $m$ Initial Velocity: $\\vec{v}_0$ Useful formula: Larmor radius : $$ r_L = \\frac{m v_\\perp}{|q| B} $$ Drift velocity in crossed fields: $$ \\vec{v}_{\\text{drift}} = \\frac{\\vec{E} \\times \\vec{B}}{B^2} $$ \u2705 4. Visualization The simulation generates: 2D trajectory plots (e.g., x\u2013y spiral paths) 3D visualizations of particle motion Insights into drift, Larmor radius, and motion behavior \u2705 \ud83d\udcbb Python Simulation Code (Tasks 2\u20134) import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # --- Parameters --- q = 1.0 # Charge (C) m = 1.0 # Mass (kg) # Fields E = np.array([1.0, 0.0, 0.0]) # Electric field (V/m) B = np.array([0.0, 0.0, 1.0]) # Magnetic field (T) # Initial conditions r0 = np.array([0.0, 0.0, 0.0]) # Position v0 = np.array([1.0, 1.0, 1.0]) # Velocity T = 20.0 # Total time (s) dt = 0.01 # Time step steps = int(T / dt) # Arrays r = np.zeros((steps, 3)) v = np.zeros((steps, 3)) t = np.zeros(steps) r[0], v[0] = r0, v0 def acceleration(v): return (q / m) * (E + np.cross(v, B)) def rk4(r, v, dt): k1v = acceleration(v) k1r = v k2v = acceleration(v + 0.5 * dt * k1v) k2r = v + 0.5 * dt * k1v k3v = acceleration(v + 0.5 * dt * k2v) k3r = v + 0.5 * dt * k2v k4v = acceleration(v + dt * k3v) k4r = v + dt * k3v v_new = v + (dt / 6.0) * (k1v + 2*k2v + 2*k3v + k4v) r_new = r + (dt / 6.0) * (k1r + 2*k2r + 2*k3r + k4r) return r_new, v_new for i in range(1, steps): r[i], v[i] = rk4(r[i-1], v[i-1], dt) t[i] = t[i-1] + dt # --- Visualization --- fig = plt.figure(figsize=(12, 5)) # 2D Trajectory plt.subplot(1, 2, 1) plt.plot(r[:,0], r[:,1]) plt.title(\"2D Trajectory (x-y)\") plt.xlabel(\"x [m]\") plt.ylabel(\"y [m]\") plt.axis('equal') plt.grid(True) # 3D Trajectory ax = fig.add_subplot(1, 2, 2, projection='3d') ax.plot3D(r[:,0], r[:,1], r[:,2]) ax.set_title(\"3D Trajectory\") ax.set_xlabel(\"x [m]\") ax.set_ylabel(\"y [m]\") ax.set_zlabel(\"z [m]\") plt.tight_layout() plt.show() \u2705 Try These Parameter Variations Case Settings Expected Behavior Pure Magnetic Field E = [0, 0, 0] Circular/spiral motion Crossed Fields (E \u00d7 B Drift) E = [1, 0, 0], B = [0, 0, 1] Drift + spiral motion Opposite Charge q = -1.0 Opposite trajectory Heavier Particle m = 2.0 Slower, larger radius \u2705 Conclusion This project covered all four key tasks: Identified key applications of the Lorentz force. Simulated particle motion in electromagnetic fields. Explored parameter changes and their effect on motion. Visualized trajectories in both 2D and 3D. These insights are foundational in fields like particle accelerators, astrophysics, and plasma engineerin","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#complete-solution-lorentz-force-simulation-and-applications","text":"","title":"\ud83c\udf1f Complete Solution: Lorentz Force Simulation and Applications"},{"location":"1%20Physics/5%20Circuits/Problem_1/#1-exploration-of-applications","text":"","title":"\u2705 1. Exploration of Applications"},{"location":"1%20Physics/5%20Circuits/Problem_1/#mathematical-basis","text":"The Lorentz force governs the motion of a charged particle in electromagnetic fields: \\[ \\vec{F} = q(\\vec{E} + \\vec{v} \\times \\vec{B}) \\] Using Newton\u2019s second law: \\[ m \\frac{d\\vec{v}}{dt} = q(\\vec{E} + \\vec{v} \\times \\vec{B}) \\] This leads to circular, helical, or drift motion based on the field and velocity configuration.","title":"\ud83d\udd38 Mathematical Basis:"},{"location":"1%20Physics/5%20Circuits/Problem_1/#real-world-applications","text":"System Role of Lorentz Force Cyclotron Circular acceleration of charged particles in $\\vec{B}$ field Mass Spectrometer Deflection reveals mass-to-charge ratio Plasma Confinement Magnetic fields trap charged particles in devices like Tokamaks Space Physics Earth's magnetic field deflects solar wind, cosmic rays","title":"\ud83d\udd38 Real-World Applications:"},{"location":"1%20Physics/5%20Circuits/Problem_1/#2-simulated-particle-motion","text":"","title":"\u2705 2. Simulated Particle Motion"},{"location":"1%20Physics/5%20Circuits/Problem_1/#mathematical-model","text":"Assume a uniform magnetic field and zero electric field: \\[ \\vec{E} = 0, \\quad \\vec{F} = q (\\vec{v} \\times \\vec{B}) \\] This results in: Circular motion if $\\vec{v} \\perp \\vec{B}$ Helical motion if $\\vec{v}$ has a component along $\\vec{B}$","title":"\ud83d\udd38 Mathematical Model:"},{"location":"1%20Physics/5%20Circuits/Problem_1/#3-parameter-exploration","text":"We vary the following parameters to observe their effects: Electric and Magnetic Fields: $\\vec{E}$, $\\vec{B}$ Charge and Mass: $q$, $m$ Initial Velocity: $\\vec{v}_0$ Useful formula: Larmor radius : $$ r_L = \\frac{m v_\\perp}{|q| B} $$ Drift velocity in crossed fields: $$ \\vec{v}_{\\text{drift}} = \\frac{\\vec{E} \\times \\vec{B}}{B^2} $$","title":"\u2705 3. Parameter Exploration"},{"location":"1%20Physics/5%20Circuits/Problem_1/#4-visualization","text":"The simulation generates: 2D trajectory plots (e.g., x\u2013y spiral paths) 3D visualizations of particle motion Insights into drift, Larmor radius, and motion behavior","title":"\u2705 4. Visualization"},{"location":"1%20Physics/5%20Circuits/Problem_1/#python-simulation-code-tasks-24","text":"import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # --- Parameters --- q = 1.0 # Charge (C) m = 1.0 # Mass (kg) # Fields E = np.array([1.0, 0.0, 0.0]) # Electric field (V/m) B = np.array([0.0, 0.0, 1.0]) # Magnetic field (T) # Initial conditions r0 = np.array([0.0, 0.0, 0.0]) # Position v0 = np.array([1.0, 1.0, 1.0]) # Velocity T = 20.0 # Total time (s) dt = 0.01 # Time step steps = int(T / dt) # Arrays r = np.zeros((steps, 3)) v = np.zeros((steps, 3)) t = np.zeros(steps) r[0], v[0] = r0, v0 def acceleration(v): return (q / m) * (E + np.cross(v, B)) def rk4(r, v, dt): k1v = acceleration(v) k1r = v k2v = acceleration(v + 0.5 * dt * k1v) k2r = v + 0.5 * dt * k1v k3v = acceleration(v + 0.5 * dt * k2v) k3r = v + 0.5 * dt * k2v k4v = acceleration(v + dt * k3v) k4r = v + dt * k3v v_new = v + (dt / 6.0) * (k1v + 2*k2v + 2*k3v + k4v) r_new = r + (dt / 6.0) * (k1r + 2*k2r + 2*k3r + k4r) return r_new, v_new for i in range(1, steps): r[i], v[i] = rk4(r[i-1], v[i-1], dt) t[i] = t[i-1] + dt # --- Visualization --- fig = plt.figure(figsize=(12, 5)) # 2D Trajectory plt.subplot(1, 2, 1) plt.plot(r[:,0], r[:,1]) plt.title(\"2D Trajectory (x-y)\") plt.xlabel(\"x [m]\") plt.ylabel(\"y [m]\") plt.axis('equal') plt.grid(True) # 3D Trajectory ax = fig.add_subplot(1, 2, 2, projection='3d') ax.plot3D(r[:,0], r[:,1], r[:,2]) ax.set_title(\"3D Trajectory\") ax.set_xlabel(\"x [m]\") ax.set_ylabel(\"y [m]\") ax.set_zlabel(\"z [m]\") plt.tight_layout() plt.show()","title":"\u2705 \ud83d\udcbb Python Simulation Code (Tasks 2\u20134)"},{"location":"1%20Physics/5%20Circuits/Problem_1/#try-these-parameter-variations","text":"Case Settings Expected Behavior Pure Magnetic Field E = [0, 0, 0] Circular/spiral motion Crossed Fields (E \u00d7 B Drift) E = [1, 0, 0], B = [0, 0, 1] Drift + spiral motion Opposite Charge q = -1.0 Opposite trajectory Heavier Particle m = 2.0 Slower, larger radius","title":"\u2705 Try These Parameter Variations"},{"location":"1%20Physics/5%20Circuits/Problem_1/#conclusion","text":"This project covered all four key tasks: Identified key applications of the Lorentz force. Simulated particle motion in electromagnetic fields. Explored parameter changes and their effect on motion. Visualized trajectories in both 2D and 3D. These insights are foundational in fields like particle accelerators, astrophysics, and plasma engineerin","title":"\u2705 Conclusion"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Task 1: Simulating Population Distributions In this first part of the Central Limit Theorem (CLT) exploration, we begin by creating large datasets to represent different types of population distributions: Uniform Distribution : Values are equally likely within a range (0 to 10). Exponential Distribution : Skewed right; models wait times or lifetimes (scale = 2). Binomial Distribution : Discrete distribution representing the number of successes in 10 trials with probability 0.5. The histograms above visualize the shape of each distribution. These populations will be used in the next task to sample and observe how the sample means behave according to the CLT. Let me know if you're ready to proceed to Task 2: Sampling and Visualization . Task 2: Sampling and Visualization We now investigate how sample size affects the distribution of sample means for different population types (Uniform, Exponential, Binomial). For each case: We take random samples of sizes 5, 10, 30, and 50. We compute the mean of each sample. We repeat this process 1000 times to build a sampling distribution . Then we plot histograms to visualize how these sample means begin to resemble a normal distribution as the sample size increases. \ud83d\udd0d Observations: For small sample sizes (e.g., 5), the sampling distribution reflects the skewness of the original population. As the sample size increases, all sampling distributions begin to take on a bell-shaped curve , aligning with the Central Limit Theorem . The convergence to normality occurs faster for symmetric distributions (like Uniform or Binomial) compared to skewed ones (like Exponential). Let me know when you\u2019re ready for Task 3: Parameter Exploration . T\u0259\u015f\u0259kk\u00fcr edir\u0259m! B\u0259li, haql\u0131s\u0131n\u0131z \u2014 1-ci \u0259sas tap\u015f\u0131r\u0131\u011f\u0131n i\u00e7ind\u0259 3 alt tap\u015f\u0131r\u0131q var idi, v\u0259 indi g\u0259lin 3-c\u00fcn\u00fc (Parameter Exploration) tam \u015f\u0259kild\u0259 h\u0259ll ed\u0259k (simulyasiya v\u0259 kodla birlikd\u0259). \u2705 Task 1.3: Parameter Exploration \u2014 Simulation and Analysis \ud83c\udfaf Goal: To understand how the original distribution , sample size , and population variance affect the shape and spread of the sampling distribution of the mean . \ud83d\udcca Simulation with Python We'll use the Exponential distribution (which is skewed) and vary the sample sizes to see the effect on the distribution of sample means. \u2705 Libraries: import numpy as np import matplotlib.pyplot as plt import seaborn as sns np.random.seed(42) \ud83e\uddea Simulate Sampling Distribution Function to generate and plot sampling distributions: def simulate_sampling_distribution(population, sample_sizes, n_simulations=1000): for n in sample_sizes: sample_means = [] for _ in range(n_simulations): sample = np.random.choice(population, size=n, replace=True) sample_means.append(np.mean(sample)) plt.figure(figsize=(7, 4)) sns.histplot(sample_means, kde=True, stat=\"density\", bins=30, color='skyblue') plt.title(f\"Sampling Distribution (n={n})\") plt.xlabel(\"Sample Mean\") plt.ylabel(\"Density\") plt.grid(True) plt.show() \ud83e\uddee Create Population and Run Simulation # Create a skewed population (Exponential) population = np.random.exponential(scale=2.0, size=100_000) # Sample sizes to explore sample_sizes = [5, 10, 30, 50] # Run the simulation simulate_sampling_distribution(population, sample_sizes) \ud83d\udccc Interpretation 1. Effect of Original Distribution : Since exponential is skewed , small sample sizes yield skewed sample mean distributions . As n increases , the distribution of sample means becomes more normal , despite the original skewness. 2. Effect of Sample Size : Larger sample sizes (n \u2265 30) yield sample mean distributions that are approximately normal . CLT holds better for larger n. 3. Effect of Population Variance : Let\u2019s test different variances: # Compare two exponential populations with different variances population_low_var = np.random.exponential(scale=1.0, size=100_000) # Lower variance population_high_var = np.random.exponential(scale=3.0, size=100_000) # Higher variance simulate_sampling_distribution(population_low_var, [30]) simulate_sampling_distribution(population_high_var, [30]) The higher the population variance , the wider the sampling distribution . But shape (normality) remains consistent as long as sample size is sufficient. \u2705 Summary: Skewed populations need larger samples to produce normally distributed sample means. Larger sample sizes increase accuracy of CLT. Higher variance \u2192 wider sampling distributions, but doesn\u2019t affect shape of convergence. Let me know when you're ready for Task 1.4: Practical Applications or the next major problem.","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#task-1-simulating-population-distributions","text":"In this first part of the Central Limit Theorem (CLT) exploration, we begin by creating large datasets to represent different types of population distributions: Uniform Distribution : Values are equally likely within a range (0 to 10). Exponential Distribution : Skewed right; models wait times or lifetimes (scale = 2). Binomial Distribution : Discrete distribution representing the number of successes in 10 trials with probability 0.5. The histograms above visualize the shape of each distribution. These populations will be used in the next task to sample and observe how the sample means behave according to the CLT. Let me know if you're ready to proceed to Task 2: Sampling and Visualization .","title":"Task 1: Simulating Population Distributions"},{"location":"1%20Physics/6%20Statistics/Problem_1/#task-2-sampling-and-visualization","text":"We now investigate how sample size affects the distribution of sample means for different population types (Uniform, Exponential, Binomial). For each case: We take random samples of sizes 5, 10, 30, and 50. We compute the mean of each sample. We repeat this process 1000 times to build a sampling distribution . Then we plot histograms to visualize how these sample means begin to resemble a normal distribution as the sample size increases.","title":"Task 2: Sampling and Visualization"},{"location":"1%20Physics/6%20Statistics/Problem_1/#observations","text":"For small sample sizes (e.g., 5), the sampling distribution reflects the skewness of the original population. As the sample size increases, all sampling distributions begin to take on a bell-shaped curve , aligning with the Central Limit Theorem . The convergence to normality occurs faster for symmetric distributions (like Uniform or Binomial) compared to skewed ones (like Exponential). Let me know when you\u2019re ready for Task 3: Parameter Exploration . T\u0259\u015f\u0259kk\u00fcr edir\u0259m! B\u0259li, haql\u0131s\u0131n\u0131z \u2014 1-ci \u0259sas tap\u015f\u0131r\u0131\u011f\u0131n i\u00e7ind\u0259 3 alt tap\u015f\u0131r\u0131q var idi, v\u0259 indi g\u0259lin 3-c\u00fcn\u00fc (Parameter Exploration) tam \u015f\u0259kild\u0259 h\u0259ll ed\u0259k (simulyasiya v\u0259 kodla birlikd\u0259).","title":"\ud83d\udd0d Observations:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#task-13-parameter-exploration-simulation-and-analysis","text":"","title":"\u2705 Task 1.3: Parameter Exploration \u2014 Simulation and Analysis"},{"location":"1%20Physics/6%20Statistics/Problem_1/#goal","text":"To understand how the original distribution , sample size , and population variance affect the shape and spread of the sampling distribution of the mean .","title":"\ud83c\udfaf Goal:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#simulation-with-python","text":"We'll use the Exponential distribution (which is skewed) and vary the sample sizes to see the effect on the distribution of sample means.","title":"\ud83d\udcca Simulation with Python"},{"location":"1%20Physics/6%20Statistics/Problem_1/#libraries","text":"import numpy as np import matplotlib.pyplot as plt import seaborn as sns np.random.seed(42)","title":"\u2705 Libraries:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#simulate-sampling-distribution","text":"","title":"\ud83e\uddea Simulate Sampling Distribution"},{"location":"1%20Physics/6%20Statistics/Problem_1/#function-to-generate-and-plot-sampling-distributions","text":"def simulate_sampling_distribution(population, sample_sizes, n_simulations=1000): for n in sample_sizes: sample_means = [] for _ in range(n_simulations): sample = np.random.choice(population, size=n, replace=True) sample_means.append(np.mean(sample)) plt.figure(figsize=(7, 4)) sns.histplot(sample_means, kde=True, stat=\"density\", bins=30, color='skyblue') plt.title(f\"Sampling Distribution (n={n})\") plt.xlabel(\"Sample Mean\") plt.ylabel(\"Density\") plt.grid(True) plt.show()","title":"Function to generate and plot sampling distributions:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#create-population-and-run-simulation","text":"# Create a skewed population (Exponential) population = np.random.exponential(scale=2.0, size=100_000) # Sample sizes to explore sample_sizes = [5, 10, 30, 50] # Run the simulation simulate_sampling_distribution(population, sample_sizes)","title":"\ud83e\uddee Create Population and Run Simulation"},{"location":"1%20Physics/6%20Statistics/Problem_1/#interpretation","text":"","title":"\ud83d\udccc Interpretation"},{"location":"1%20Physics/6%20Statistics/Problem_1/#1-effect-of-original-distribution","text":"Since exponential is skewed , small sample sizes yield skewed sample mean distributions . As n increases , the distribution of sample means becomes more normal , despite the original skewness.","title":"1. Effect of Original Distribution:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#2-effect-of-sample-size","text":"Larger sample sizes (n \u2265 30) yield sample mean distributions that are approximately normal . CLT holds better for larger n.","title":"2. Effect of Sample Size:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#3-effect-of-population-variance","text":"Let\u2019s test different variances: # Compare two exponential populations with different variances population_low_var = np.random.exponential(scale=1.0, size=100_000) # Lower variance population_high_var = np.random.exponential(scale=3.0, size=100_000) # Higher variance simulate_sampling_distribution(population_low_var, [30]) simulate_sampling_distribution(population_high_var, [30]) The higher the population variance , the wider the sampling distribution . But shape (normality) remains consistent as long as sample size is sufficient.","title":"3. Effect of Population Variance:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#summary","text":"Skewed populations need larger samples to produce normally distributed sample means. Larger sample sizes increase accuracy of CLT. Higher variance \u2192 wider sampling distributions, but doesn\u2019t affect shape of convergence. Let me know when you're ready for Task 1.4: Practical Applications or the next major problem.","title":"\u2705 Summary:"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1 M\u0259n Problem 1 \u00fc\u00e7\u00fcn tam riyazi \u0259sasland\u0131rman\u0131 v\u0259 Python simulyasiyas\u0131n\u0131 t\u0259qdim etdim. Bu kod s\u0259n\u0259di art\u0131q yarad\u0131l\u0131b v\u0259 a\u015fa\u011f\u0131dak\u0131lara cavab verir: \u2705 \u018fhat\u0259 olunan hiss\u0259l\u0259r: Riyazi \u0259sasland\u0131rma: Yatay v\u0259 \u015faquli h\u0259r\u0259k\u0259tin t\u0259nlikl\u0259ri U\u00e7u\u015f m\u00fcdd\u0259ti v\u0259 m\u0259saf\u0259 \u00fc\u00e7\u00fcn \u00e7\u0131xar\u0131lm\u0131\u015f d\u00fcsturlar \u0130deal modelin s\u0259rh\u0259dl\u0259ri Python kodu il\u0259 simulyasiya: At\u0131\u015f buca\u011f\u0131ndan as\u0131l\u0131 olaraq m\u0259saf\u0259nin qrafiki M\u00fcxt\u0259lif ba\u015flan\u011f\u0131c s\u00fcr\u0259tl\u0259ri \u00fc\u00e7\u00fcn m\u00fcqayis\u0259li qrafik N\u0259tic\u0259l\u0259rin vizualizasiyas\u0131: 0\u201390\u00b0 bucaqlar\u0131 \u00fczr\u0259 m\u0259saf\u0259nin qrafiki F\u0259rqli v\u2080 qiym\u0259tl\u0259ri \u00fc\u00e7\u00fcn t\u0259sir analizi \u26a0 G\u0259l\u0259c\u0259k m\u0259rh\u0259l\u0259l\u0259r (\u0259g\u0259r ist\u0259yirs\u0259ns\u0259): H\u00fcnd\u00fcr ba\u015flan\u011f\u0131c n\u00f6qt\u0259si daxil edilsin Hava m\u00fcqavim\u0259ti (drag force) modell\u0259\u015fdirilsin Reall\u0131\u011fa daha yax\u0131n n\u00fcmun\u0259l\u0259r simulyasiya olunsun (idman, top at\u0131\u015f\u0131, v\u0259 s.) \u018fg\u0259r Problem 2 d\u0259 bu m\u00f6vzunun davam\u0131d\u0131rsa v\u0259 ya ba\u015fqa bir m\u0259s\u0259l\u0259y\u0259 aiddirs\u0259, z\u0259hm\u0259t olmasa onu tam \u015f\u0259kild\u0259 payla\u015f \u2014 onu da h\u0259ll edim. Riyazi \u0259sasland\u0131rma: Yatay v\u0259 \u015faquli h\u0259r\u0259k\u0259tin t\u0259nlikl\u0259ri U\u00e7u\u015f m\u00fcdd\u0259ti v\u0259 m\u0259saf\u0259 \u00fc\u00e7\u00fcn \u00e7\u0131xar\u0131lm\u0131\u015f d\u00fcsturlar \u0130deal modelin s\u0259rh\u0259dl\u0259ri Python kodu il\u0259 simulyasiya: At\u0131\u015f buca\u011f\u0131ndan as\u0131l\u0131 olaraq m\u0259saf\u0259nin qrafiki M\u00fcxt\u0259lif ba\u015flan\u011f\u0131c s\u00fcr\u0259tl\u0259ri \u00fc\u00e7\u00fcn m\u00fcqayis\u0259li qrafik N\u0259tic\u0259l\u0259rin vizualizasiyas\u0131: 0\u201390\u00b0 bucaqlar\u0131 \u00fczr\u0259 m\u0259saf\u0259nin qrafiki F\u0259rqli v\u2080 qiym\u0259tl\u0259ri \u00fc\u00e7\u00fcn t\u0259sir analizi","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"M\u0259n Problem 1 \u00fc\u00e7\u00fcn tam riyazi \u0259sasland\u0131rman\u0131 v\u0259 Python simulyasiyas\u0131n\u0131 t\u0259qdim etdim. Bu kod s\u0259n\u0259di art\u0131q yarad\u0131l\u0131b v\u0259 a\u015fa\u011f\u0131dak\u0131lara cavab verir:","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#hat-olunan-hisslr","text":"Riyazi \u0259sasland\u0131rma: Yatay v\u0259 \u015faquli h\u0259r\u0259k\u0259tin t\u0259nlikl\u0259ri U\u00e7u\u015f m\u00fcdd\u0259ti v\u0259 m\u0259saf\u0259 \u00fc\u00e7\u00fcn \u00e7\u0131xar\u0131lm\u0131\u015f d\u00fcsturlar \u0130deal modelin s\u0259rh\u0259dl\u0259ri Python kodu il\u0259 simulyasiya: At\u0131\u015f buca\u011f\u0131ndan as\u0131l\u0131 olaraq m\u0259saf\u0259nin qrafiki M\u00fcxt\u0259lif ba\u015flan\u011f\u0131c s\u00fcr\u0259tl\u0259ri \u00fc\u00e7\u00fcn m\u00fcqayis\u0259li qrafik N\u0259tic\u0259l\u0259rin vizualizasiyas\u0131: 0\u201390\u00b0 bucaqlar\u0131 \u00fczr\u0259 m\u0259saf\u0259nin qrafiki F\u0259rqli v\u2080 qiym\u0259tl\u0259ri \u00fc\u00e7\u00fcn t\u0259sir analizi","title":"\u2705 \u018fhat\u0259 olunan hiss\u0259l\u0259r:"},{"location":"1%20Physics/7%20Measurements/Problem_1/#glck-mrhllr-gr-istyirsns","text":"H\u00fcnd\u00fcr ba\u015flan\u011f\u0131c n\u00f6qt\u0259si daxil edilsin Hava m\u00fcqavim\u0259ti (drag force) modell\u0259\u015fdirilsin Reall\u0131\u011fa daha yax\u0131n n\u00fcmun\u0259l\u0259r simulyasiya olunsun (idman, top at\u0131\u015f\u0131, v\u0259 s.) \u018fg\u0259r Problem 2 d\u0259 bu m\u00f6vzunun davam\u0131d\u0131rsa v\u0259 ya ba\u015fqa bir m\u0259s\u0259l\u0259y\u0259 aiddirs\u0259, z\u0259hm\u0259t olmasa onu tam \u015f\u0259kild\u0259 payla\u015f \u2014 onu da h\u0259ll edim. Riyazi \u0259sasland\u0131rma: Yatay v\u0259 \u015faquli h\u0259r\u0259k\u0259tin t\u0259nlikl\u0259ri U\u00e7u\u015f m\u00fcdd\u0259ti v\u0259 m\u0259saf\u0259 \u00fc\u00e7\u00fcn \u00e7\u0131xar\u0131lm\u0131\u015f d\u00fcsturlar \u0130deal modelin s\u0259rh\u0259dl\u0259ri Python kodu il\u0259 simulyasiya: At\u0131\u015f buca\u011f\u0131ndan as\u0131l\u0131 olaraq m\u0259saf\u0259nin qrafiki M\u00fcxt\u0259lif ba\u015flan\u011f\u0131c s\u00fcr\u0259tl\u0259ri \u00fc\u00e7\u00fcn m\u00fcqayis\u0259li qrafik N\u0259tic\u0259l\u0259rin vizualizasiyas\u0131: 0\u201390\u00b0 bucaqlar\u0131 \u00fczr\u0259 m\u0259saf\u0259nin qrafiki F\u0259rqli v\u2080 qiym\u0259tl\u0259ri \u00fc\u00e7\u00fcn t\u0259sir analizi","title":"\u26a0 G\u0259l\u0259c\u0259k m\u0259rh\u0259l\u0259l\u0259r (\u0259g\u0259r ist\u0259yirs\u0259ns\u0259):"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"}]}