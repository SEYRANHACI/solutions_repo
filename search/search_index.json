{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Mathematical Formulation of Projectile Motion 1.1 Governing Equations of Motion Based on Newton\u2019s Second Law , and assuming no air resistance: \\[ F = ma = -mg\\hat{y} \\] This leads to two differential equations: Horizontal: $$ \\frac{d^2x}{dt^2} = 0 $$ Vertical: $$ \\frac{d^2y}{dt^2} = -g $$ 2. Solving the Equations Initial conditions: Position: \\((x_0, y_0) = (0, y_0)\\) Velocity: \\(v_0\\) at angle \\(\\theta\\) Components: $$ v_{0x} = v_0 \\cos\\theta, \\quad v_{0y} = v_0 \\sin\\theta $$ Solutions: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] \\[ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] 3. Time of Flight To find when the projectile hits the ground \\(y(t) = 0\\) : If \\(y_0 = 0\\) : \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2g y_0}}{g} \\] 4. Range Calculation \\(y_0 = 0\\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] \\(y_0 \\neq 0\\) : \\[ R = v_0 \\cos\\theta \\cdot t \\] Where \\(t\\) is the total time of flight. 5. Maximum Height \\(y_0 = 0\\) : \\[ H = \\frac{v_0^2 \\sin^2\\theta}{2g} \\] \\(y_0 \\neq 0\\) : \\[ H = y_0 + \\frac{v_0^2 \\sin^2\\theta}{2g} \\] 6. Optimal Launch Angle For maximum range (when \\(y_0 = 0\\) ): \\[ \\theta_{\\text{optimal}} = 45^\\circ \\] For \\(y_0 > 0\\) : \\[ \\theta_{\\text{optimal}} \\approx 45^\\circ - \\frac{y_0}{v_0^2} \\cdot k \\] 1.2 Range vs. Launch Angle \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] Key Insights: Launch Angle: Max range at \\(\\theta = 45^\\circ\\) Symmetry: \\(R(\\theta) = R(90^\\circ - \\theta)\\) Initial Velocity: \\(R \\propto v_0^2\\) Gravity: \\(R \\propto \\frac{1}{g}\\) Initial Height \\(y_0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2gy_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\] 3. Observations from Graphs Increasing \\(v_0\\) raises both peak and range. Higher \\(y_0\\) shifts optimal angle below \\(45^\\circ\\) . 4. Limitations & Extensions Limitations: No air resistance No wind Flat terrain Possible Extensions: Drag force: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Wind effects * Numerical models 5. Conclusion Max range at \\(45^\\circ\\) Higher \\(v_0\\) \u2192 longer range Higher \\(y_0\\) \u2192 optimal angle < \\(45^\\circ\\) Lower gravity \u2192 longer range 1.3 Angle vs. Range Analysis Projectile motion is governed by: \\[ F = ma \\] Equations of Motion: Horizontal: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ * Vertical: $$ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time of Flight (if \\(y_0 = 0\\) ): \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] Range: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2 g y_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\] Applications Sports: Optimal shots in basketball, soccer, golf. Military: Artillery, missiles. Aerospace: Planetary landing, satellite launches. Limitations & Further Work Limits: No drag No wind Level ground Future Improvements: Include air resistance: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Simulate wind effects * Use numerical methods","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#mathematical-formulation-of-projectile-motion","text":"","title":"Mathematical Formulation of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-governing-equations-of-motion","text":"Based on Newton\u2019s Second Law , and assuming no air resistance: \\[ F = ma = -mg\\hat{y} \\] This leads to two differential equations: Horizontal: $$ \\frac{d^2x}{dt^2} = 0 $$ Vertical: $$ \\frac{d^2y}{dt^2} = -g $$","title":"1.1 Governing Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-solving-the-equations","text":"Initial conditions: Position: \\((x_0, y_0) = (0, y_0)\\) Velocity: \\(v_0\\) at angle \\(\\theta\\) Components: $$ v_{0x} = v_0 \\cos\\theta, \\quad v_{0y} = v_0 \\sin\\theta $$ Solutions: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] \\[ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\]","title":"2. Solving the Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-time-of-flight","text":"To find when the projectile hits the ground \\(y(t) = 0\\) : If \\(y_0 = 0\\) : \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2g y_0}}{g} \\]","title":"3. Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-range-calculation","text":"\\(y_0 = 0\\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] \\(y_0 \\neq 0\\) : \\[ R = v_0 \\cos\\theta \\cdot t \\] Where \\(t\\) is the total time of flight.","title":"4. Range Calculation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-maximum-height","text":"\\(y_0 = 0\\) : \\[ H = \\frac{v_0^2 \\sin^2\\theta}{2g} \\] \\(y_0 \\neq 0\\) : \\[ H = y_0 + \\frac{v_0^2 \\sin^2\\theta}{2g} \\]","title":"5. Maximum Height"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-optimal-launch-angle","text":"For maximum range (when \\(y_0 = 0\\) ): \\[ \\theta_{\\text{optimal}} = 45^\\circ \\] For \\(y_0 > 0\\) : \\[ \\theta_{\\text{optimal}} \\approx 45^\\circ - \\frac{y_0}{v_0^2} \\cdot k \\]","title":"6. Optimal Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-range-vs-launch-angle","text":"\\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] Key Insights: Launch Angle: Max range at \\(\\theta = 45^\\circ\\) Symmetry: \\(R(\\theta) = R(90^\\circ - \\theta)\\) Initial Velocity: \\(R \\propto v_0^2\\) Gravity: \\(R \\propto \\frac{1}{g}\\) Initial Height \\(y_0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2gy_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\]","title":"1.2 Range vs. Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-observations-from-graphs","text":"Increasing \\(v_0\\) raises both peak and range. Higher \\(y_0\\) shifts optimal angle below \\(45^\\circ\\) .","title":"3. Observations from Graphs"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-limitations-extensions","text":"Limitations: No air resistance No wind Flat terrain Possible Extensions: Drag force: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Wind effects * Numerical models","title":"4. Limitations &amp; Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-conclusion","text":"Max range at \\(45^\\circ\\) Higher \\(v_0\\) \u2192 longer range Higher \\(y_0\\) \u2192 optimal angle < \\(45^\\circ\\) Lower gravity \u2192 longer range","title":"5. Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-angle-vs-range-analysis","text":"Projectile motion is governed by: \\[ F = ma \\] Equations of Motion: Horizontal: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ * Vertical: $$ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time of Flight (if \\(y_0 = 0\\) ): \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] Range: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2 g y_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\]","title":"1.3 Angle vs. Range Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#applications","text":"Sports: Optimal shots in basketball, soccer, golf. Military: Artillery, missiles. Aerospace: Planetary landing, satellite launches.","title":"Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-further-work","text":"Limits: No drag No wind Level ground Future Improvements: Include air resistance: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Simulate wind effects * Use numerical methods","title":"Limitations &amp; Further Work"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2: Forced Damped Pendulum 1.1 Theoretical Foundation \u2705 Differential Equation: The motion of a forced damped pendulum is governed by: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles \\(\\theta \\approx \\sin(\\theta)\\) , it simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] 2.1.2 Analysis of Dynamics This is the nonlinear form of the differential equation (no approximation): \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Used to study chaotic motion and resonance behavior in the full system. 2.1.3 Practical Applications Simulations of real-world systems (e.g., mechanical oscillators) can be modeled using the same equation : \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Parameters (\u03b2, \u03c9\u2080, A, \u03c9) are varied to reflect different scenarios. 2.1.4 Phase Portrait & Poincar\u00e9 Section We analyze system dynamics using: Phase Portraits: \\(\\theta\\) vs. \\(\\dot{\\theta}\\) Poincar\u00e9 Sections: sampled state at regular intervals Governing equation (nonlinear form) again: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\]","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2-forced-damped-pendulum","text":"","title":"Problem 2: Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-theoretical-foundation","text":"","title":"1.1 Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation","text":"The motion of a forced damped pendulum is governed by: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles \\(\\theta \\approx \\sin(\\theta)\\) , it simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\]","title":"\u2705 Differential Equation:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#212-analysis-of-dynamics","text":"This is the nonlinear form of the differential equation (no approximation): \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Used to study chaotic motion and resonance behavior in the full system.","title":"2.1.2 Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#213-practical-applications","text":"Simulations of real-world systems (e.g., mechanical oscillators) can be modeled using the same equation : \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Parameters (\u03b2, \u03c9\u2080, A, \u03c9) are varied to reflect different scenarios.","title":"2.1.3 Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#214-phase-portrait-poincare-section","text":"We analyze system dynamics using: Phase Portraits: \\(\\theta\\) vs. \\(\\dot{\\theta}\\) Poincar\u00e9 Sections: sampled state at regular intervals Governing equation (nonlinear form) again: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\]","title":"2.1.4 Phase Portrait &amp; Poincar\u00e9 Section"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Great, let\u2019s break this task into the four key parts: 1. Deriving the Relationship (Kepler\u2019s Third Law for Circular Orbits) Newton's Law of Universal Gravitation: For two bodies (like a planet and its satellite), \\[ F = \\frac{G M m}{r^2} \\] Where: \\(G\\) = gravitational constant \\(M\\) = mass of central body (e.g., Earth, Sun) \\(m\\) = mass of orbiting body (e.g., Moon, satellite) \\(r\\) = orbital radius Centripetal Force for Circular Motion: \\[ F = \\frac{m v^2}{r} \\] Equating Gravitational and Centripetal Forces: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\Rightarrow v^2 = \\frac{G M}{r} \\] Now, express orbital velocity \\(v\\) in terms of the period \\(T\\) : \\[ v = \\frac{2 \\pi r}{T} \\Rightarrow \\left(\\frac{2 \\pi r}{T}\\right)^2 = \\frac{G M}{r} \\] Simplify: \\[ \\frac{4 \\pi^2 r^2}{T^2} = \\frac{G M}{r} \\Rightarrow T^2 = \\frac{4 \\pi^2 r^3}{G M} \\] \u2705 Kepler\u2019s Third Law (Circular Orbit Form): \\[ T^2 \\propto r^3 \\] 2. Implications for Astronomy a. Mass Determination: Rearranging the formula: \\[ M = \\frac{4 \\pi^2 r^3}{G T^2} \\] This allows astronomers to calculate the mass of a central body (like the Earth or the Sun) using observations of satellite or planetary orbits. b. Distance Estimation: If we know the orbital period and the mass of the central body, we can solve for orbital radius \\(r\\) . c. System Characterization: Used to classify and understand multi-body systems such as: Exoplanets around stars Moons around planets Satellites around Earth 3. Real-World Examples a. Moon Orbiting Earth \\(T \\approx 27.3\\) days \\(= 2.36 \\times 10^6\\) s \\(r \\approx 3.84 \\times 10^8\\) m Earth mass from this: \\[ M = \\frac{4 \\pi^2 r^3}{G T^2} \\approx 5.97 \\times 10^{24} \\text{ kg} \\] b. Planets in the Solar System Using ratios (e.g., Earth vs. Mars): \\[ \\left(\\frac{T_1}{T_2}\\right)^2 = \\left(\\frac{r_1}{r_2}\\right)^3 \\] Holds well when measured. 4. Computational Model to Simulate and Verify We can simulate several orbiting bodies and numerically test if \\(T^2 \\propto r^3\\) . Here's a basic Python simulation using matplotlib and numpy : import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # gravitational constant M = 1.989e30 # mass of the Sun in kg # Generate radii (in meters) and calculate periods radii = np.linspace(0.3, 30, 100) * 1.496e11 # 0.3 AU to 30 AU T_squared = [] R_cubed = [] for r in radii: T = 2 * np.pi * np.sqrt(r**3 / (G * M)) T_squared.append(T**2) R_cubed.append(r**3) # Plot T^2 vs r^3 plt.figure(figsize=(8,6)) plt.plot(R_cubed, T_squared, label=r'$T^2$ vs $r^3$', color='blue') plt.xlabel('Orbital Radius Cubed $r^3$ (m\u00b3)') plt.ylabel('Orbital Period Squared $T^2$ (s\u00b2)') plt.title(\"Verification of Kepler's Third Law\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() \u2705 Summary Derived : \\(T^2 = \\frac{4 \\pi^2 r^3}{GM}\\) Implications : Enables mass/distance determination in astronomy. Examples : Moon-Earth system, planetary orbits. Model : Simulated and verified using a Python plot \u2014 confirms the linearity of \\(T^2\\) vs. \\(r^3\\) . Would you like to explore adding elliptical orbits, or implementing an interactive orbit simulator next?","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-deriving-the-relationship-keplers-third-law-for-circular-orbits","text":"","title":"1. Deriving the Relationship (Kepler\u2019s Third Law for Circular Orbits)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#newtons-law-of-universal-gravitation","text":"For two bodies (like a planet and its satellite), \\[ F = \\frac{G M m}{r^2} \\] Where: \\(G\\) = gravitational constant \\(M\\) = mass of central body (e.g., Earth, Sun) \\(m\\) = mass of orbiting body (e.g., Moon, satellite) \\(r\\) = orbital radius","title":"Newton's Law of Universal Gravitation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#centripetal-force-for-circular-motion","text":"\\[ F = \\frac{m v^2}{r} \\]","title":"Centripetal Force for Circular Motion:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#equating-gravitational-and-centripetal-forces","text":"\\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\Rightarrow v^2 = \\frac{G M}{r} \\] Now, express orbital velocity \\(v\\) in terms of the period \\(T\\) : \\[ v = \\frac{2 \\pi r}{T} \\Rightarrow \\left(\\frac{2 \\pi r}{T}\\right)^2 = \\frac{G M}{r} \\] Simplify: \\[ \\frac{4 \\pi^2 r^2}{T^2} = \\frac{G M}{r} \\Rightarrow T^2 = \\frac{4 \\pi^2 r^3}{G M} \\]","title":"Equating Gravitational and Centripetal Forces:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-circular-orbit-form","text":"\\[ T^2 \\propto r^3 \\]","title":"\u2705 Kepler\u2019s Third Law (Circular Orbit Form):"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-implications-for-astronomy","text":"","title":"2. Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#a-mass-determination","text":"Rearranging the formula: \\[ M = \\frac{4 \\pi^2 r^3}{G T^2} \\] This allows astronomers to calculate the mass of a central body (like the Earth or the Sun) using observations of satellite or planetary orbits.","title":"a. Mass Determination:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#b-distance-estimation","text":"If we know the orbital period and the mass of the central body, we can solve for orbital radius \\(r\\) .","title":"b. Distance Estimation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#c-system-characterization","text":"Used to classify and understand multi-body systems such as: Exoplanets around stars Moons around planets Satellites around Earth","title":"c. System Characterization:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-examples","text":"","title":"3. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#a-moon-orbiting-earth","text":"\\(T \\approx 27.3\\) days \\(= 2.36 \\times 10^6\\) s \\(r \\approx 3.84 \\times 10^8\\) m Earth mass from this: \\[ M = \\frac{4 \\pi^2 r^3}{G T^2} \\approx 5.97 \\times 10^{24} \\text{ kg} \\]","title":"a. Moon Orbiting Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#b-planets-in-the-solar-system","text":"Using ratios (e.g., Earth vs. Mars): \\[ \\left(\\frac{T_1}{T_2}\\right)^2 = \\left(\\frac{r_1}{r_2}\\right)^3 \\] Holds well when measured.","title":"b. Planets in the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-computational-model-to-simulate-and-verify","text":"We can simulate several orbiting bodies and numerically test if \\(T^2 \\propto r^3\\) . Here's a basic Python simulation using matplotlib and numpy : import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # gravitational constant M = 1.989e30 # mass of the Sun in kg # Generate radii (in meters) and calculate periods radii = np.linspace(0.3, 30, 100) * 1.496e11 # 0.3 AU to 30 AU T_squared = [] R_cubed = [] for r in radii: T = 2 * np.pi * np.sqrt(r**3 / (G * M)) T_squared.append(T**2) R_cubed.append(r**3) # Plot T^2 vs r^3 plt.figure(figsize=(8,6)) plt.plot(R_cubed, T_squared, label=r'$T^2$ vs $r^3$', color='blue') plt.xlabel('Orbital Radius Cubed $r^3$ (m\u00b3)') plt.ylabel('Orbital Period Squared $T^2$ (s\u00b2)') plt.title(\"Verification of Kepler's Third Law\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"4. Computational Model to Simulate and Verify"},{"location":"1%20Physics/2%20Gravity/Problem_1/#summary","text":"Derived : \\(T^2 = \\frac{4 \\pi^2 r^3}{GM}\\) Implications : Enables mass/distance determination in astronomy. Examples : Moon-Earth system, planetary orbits. Model : Simulated and verified using a Python plot \u2014 confirms the linearity of \\(T^2\\) vs. \\(r^3\\) . Would you like to explore adding elliptical orbits, or implementing an interactive orbit simulator next?","title":"\u2705 Summary"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Sure! Here's your simplified and clean version of the Cosmic Velocities topic in English : \ud83d\ude80 Cosmic Velocities \u2014 Simple Explanation 1\ufe0f\u20e3 First Cosmic Velocity (v\u2081) \u2014 To Enter Orbit The minimum horizontal speed needed for a body to enter a stable circular orbit around a planet. Formula: $$ v\u2081 = \\sqrt{\\frac{GM}{r}} $$ 2\ufe0f\u20e3 Second Cosmic Velocity (v\u2082) \u2014 To Escape Gravity The speed required to completely escape a planet\u2019s gravitational pull. Formula: $$ v\u2082 = \\sqrt{\\frac{2GM}{r}} = \\sqrt{2} \\cdot v\u2081 $$ 3\ufe0f\u20e3 Third Cosmic Velocity (v\u2083) \u2014 To Leave the Solar System The speed required to escape the Sun's gravity from Earth\u2019s orbit. Approximate Formula: $$ v\u2083 = \\sqrt{v\u2082^2 + v_{\\text{earth orbit}}^2} $$ \ud83c\udf0d Example Calculations (Python Code) import numpy as np G = 6.67430e-11 # Gravitational constant v_earth_orbit = 29.78e3 # Earth's orbital speed (m/s) planets = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.390e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.991e7} } for name, data in planets.items(): M = data[\"mass\"] r = data[\"radius\"] v1 = np.sqrt(G * M / r) v2 = np.sqrt(2 * G * M / r) if name == \"Earth\": v3 = np.sqrt(v2**2 + v_earth_orbit**2) print(f\"{name}: v\u2081={v1/1000:.2f} km/s, v\u2082={v2/1000:.2f} km/s, v\u2083={v3/1000:.2f} km/s\") else: print(f\"{name}: v\u2081={v1/1000:.2f} km/s, v\u2082={v2/1000:.2f} km/s\") \ud83d\udccc What These Velocities Mean Velocity Use Case v\u2081 Placing satellites into orbit (e.g., GPS, ISS) v\u2082 Interplanetary missions (e.g., Mars rovers) v\u2083 Escaping the solar system (e.g., Voyager 1 probe) \ud83d\udd0d Test Example: Classify a Given Launch Speed def classify_velocity(v_launch): if v_launch < 7910: return \"Not enough to orbit \u2014 falls back to Earth\" elif 7910 <= v_launch < 11190: return \"Achieves Earth orbit\" elif 11190 <= v_launch < 42100: return \"Escapes Earth's gravity\" else: return \"Exits the Solar System\" for v in [3000, 7900, 11200, 45000]: print(f\"{v/1000:.1f} km/s \u2192 {classify_velocity(v)}\") Would you like me to format this as a downloadable PDF or Word document ?","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#cosmic-velocities-simple-explanation","text":"","title":"\ud83d\ude80 Cosmic Velocities \u2014 Simple Explanation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-first-cosmic-velocity-v1-to-enter-orbit","text":"The minimum horizontal speed needed for a body to enter a stable circular orbit around a planet. Formula: $$ v\u2081 = \\sqrt{\\frac{GM}{r}} $$","title":"1\ufe0f\u20e3 First Cosmic Velocity (v\u2081) \u2014 To Enter Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-second-cosmic-velocity-v2-to-escape-gravity","text":"The speed required to completely escape a planet\u2019s gravitational pull. Formula: $$ v\u2082 = \\sqrt{\\frac{2GM}{r}} = \\sqrt{2} \\cdot v\u2081 $$","title":"2\ufe0f\u20e3 Second Cosmic Velocity (v\u2082) \u2014 To Escape Gravity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-third-cosmic-velocity-v3-to-leave-the-solar-system","text":"The speed required to escape the Sun's gravity from Earth\u2019s orbit. Approximate Formula: $$ v\u2083 = \\sqrt{v\u2082^2 + v_{\\text{earth orbit}}^2} $$","title":"3\ufe0f\u20e3 Third Cosmic Velocity (v\u2083) \u2014 To Leave the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-calculations-python-code","text":"import numpy as np G = 6.67430e-11 # Gravitational constant v_earth_orbit = 29.78e3 # Earth's orbital speed (m/s) planets = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.390e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.991e7} } for name, data in planets.items(): M = data[\"mass\"] r = data[\"radius\"] v1 = np.sqrt(G * M / r) v2 = np.sqrt(2 * G * M / r) if name == \"Earth\": v3 = np.sqrt(v2**2 + v_earth_orbit**2) print(f\"{name}: v\u2081={v1/1000:.2f} km/s, v\u2082={v2/1000:.2f} km/s, v\u2083={v3/1000:.2f} km/s\") else: print(f\"{name}: v\u2081={v1/1000:.2f} km/s, v\u2082={v2/1000:.2f} km/s\")","title":"\ud83c\udf0d Example Calculations (Python Code)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#what-these-velocities-mean","text":"Velocity Use Case v\u2081 Placing satellites into orbit (e.g., GPS, ISS) v\u2082 Interplanetary missions (e.g., Mars rovers) v\u2083 Escaping the solar system (e.g., Voyager 1 probe)","title":"\ud83d\udccc What These Velocities Mean"},{"location":"1%20Physics/2%20Gravity/Problem_2/#test-example-classify-a-given-launch-speed","text":"def classify_velocity(v_launch): if v_launch < 7910: return \"Not enough to orbit \u2014 falls back to Earth\" elif 7910 <= v_launch < 11190: return \"Achieves Earth orbit\" elif 11190 <= v_launch < 42100: return \"Escapes Earth's gravity\" else: return \"Exits the Solar System\" for v in [3000, 7900, 11200, 45000]: print(f\"{v/1000:.1f} km/s \u2192 {classify_velocity(v)}\") Would you like me to format this as a downloadable PDF or Word document ?","title":"\ud83d\udd0d Test Example: Classify a Given Launch Speed"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Here\u2019s a clean, simplified, and fully English version of the material you provided on Gravitational Motion and Trajectories , ideal for a project, study guide, or explanation: \ud83c\udf0d Problem 3 \u2014 Gravitational Motion and Space Trajectories 3.1 Newton\u2019s Law of Gravitation The gravitational force acting between Earth and a payload (e.g., a spacecraft or satellite) is: \\[ F = \\frac{GMm}{r^2} \\] \\(G\\) \u2013 Gravitational constant: \\(6.67430 \\times 10^{-11} \\ \\mathrm{m^3 \\cdot kg^{-1} \\cdot s^{-2}}\\) \\(M\\) \u2013 Mass of Earth: \\(5.972 \\times 10^{24} \\ \\mathrm{kg}\\) \\(m\\) \u2013 Mass of the object/payload \\(r\\) \u2013 Distance from the center of the Earth 3.1.1 Conservation of Mechanical Energy The total mechanical energy \\(E\\) (kinetic + potential) of a payload in motion is: \\[ E = \\frac{1}{2}mv^2 - \\frac{GMm}{r} \\] \\(v\\) : Speed of the object \\(r\\) : Distance from Earth\u2019s center \ud83d\ude80 Trajectory Types Based on Energy 1. Parabolic Trajectory \u2013 Escape velocity Total Energy \\(E = 0\\) Condition: $$ \\frac{1}{2}mv^2 = \\frac{GMm}{r} $$ * Follows a parabolic path; just escapes Earth\u2019s gravity. 2. Elliptical Orbit Total Energy \\(E < 0\\) Equation: $$ E = -\\frac{GMm}{2a} $$ * \\(a\\) : Semi-major axis of the elliptical orbit 3. Hyperbolic Trajectory Total Energy \\(E > 0\\) Object escapes Earth\u2019s gravity at high speed. 3.1.2 Mathematical Model (Force and Acceleration) Using Newton\u2019s Second Law and Universal Gravitation : \\[ \\vec{a} = -\\frac{GM}{r^3} \\vec{r} \\] Where: \\(\\vec{a}\\) : Acceleration vector \\(\\vec{r}\\) : Position vector \\(r = \\sqrt{x^2 + y^2}\\) This is a central force problem , often solved using numerical methods like Euler or Runge-Kutta. 3.1.3 \ud83d\ude80 Real-World Trajectories Trajectory Type Required Speed (from LEO) Real-World Example Suborbital < 7.8 km/s Blue Origin space tourism Orbital (Circular) \u2248 7.8 km/s Satellites, ISS Elliptical Orbit 7.8 \u2013 11.2 km/s Geostationary satellites, transfer orbits Escape (Hyperbolic) > 11.2 km/s Voyager, Mars rovers LEO : Low Earth Orbit ISS : International Space Station 3.1.4 \u2705 Key Equations Newton\u2019s Law of Gravitation (Vector Form): \\[ \\vec{F}_g = -\\frac{GMm}{r^2} \\hat{r} \\] \\(\\hat{r}\\) : Unit vector in radial direction Negative sign means the force is attractive (toward Earth) Newton\u2019s Second Law: \\[ \\vec{a} = \\frac{\\vec{F}}{m} = -\\frac{GM}{r^3} \\vec{r} \\] Equations of Motion (2D Form): \\[ \\frac{d^2x}{dt^2} = -\\frac{GMx}{(x^2 + y^2)^{3/2}}, \\quad \\frac{d^2y}{dt^2} = -\\frac{GMy}{(x^2 + y^2)^{3/2}} \\] These are solved using numerical methods (e.g., Euler integration) in Python simulations. \ud83d\udcc8 Visualization: Numerical simulations can visualize trajectories like: Arcs (suborbital) Circles and ellipses (orbital) Hyperbolas (escape) Would you like this formatted into a PDF or PowerPoint presentation ?","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3-gravitational-motion-and-space-trajectories","text":"","title":"\ud83c\udf0d Problem 3 \u2014 Gravitational Motion and Space Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#31-newtons-law-of-gravitation","text":"The gravitational force acting between Earth and a payload (e.g., a spacecraft or satellite) is: \\[ F = \\frac{GMm}{r^2} \\] \\(G\\) \u2013 Gravitational constant: \\(6.67430 \\times 10^{-11} \\ \\mathrm{m^3 \\cdot kg^{-1} \\cdot s^{-2}}\\) \\(M\\) \u2013 Mass of Earth: \\(5.972 \\times 10^{24} \\ \\mathrm{kg}\\) \\(m\\) \u2013 Mass of the object/payload \\(r\\) \u2013 Distance from the center of the Earth","title":"3.1 Newton\u2019s Law of Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#311-conservation-of-mechanical-energy","text":"The total mechanical energy \\(E\\) (kinetic + potential) of a payload in motion is: \\[ E = \\frac{1}{2}mv^2 - \\frac{GMm}{r} \\] \\(v\\) : Speed of the object \\(r\\) : Distance from Earth\u2019s center","title":"3.1.1 Conservation of Mechanical Energy"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectory-types-based-on-energy","text":"","title":"\ud83d\ude80 Trajectory Types Based on Energy"},{"location":"1%20Physics/2%20Gravity/Problem_3/#1-parabolic-trajectory-escape-velocity","text":"Total Energy \\(E = 0\\) Condition: $$ \\frac{1}{2}mv^2 = \\frac{GMm}{r} $$ * Follows a parabolic path; just escapes Earth\u2019s gravity.","title":"1. Parabolic Trajectory \u2013 Escape velocity"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-elliptical-orbit","text":"Total Energy \\(E < 0\\) Equation: $$ E = -\\frac{GMm}{2a} $$ * \\(a\\) : Semi-major axis of the elliptical orbit","title":"2. Elliptical Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-hyperbolic-trajectory","text":"Total Energy \\(E > 0\\) Object escapes Earth\u2019s gravity at high speed.","title":"3. Hyperbolic Trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_3/#312-mathematical-model-force-and-acceleration","text":"Using Newton\u2019s Second Law and Universal Gravitation : \\[ \\vec{a} = -\\frac{GM}{r^3} \\vec{r} \\] Where: \\(\\vec{a}\\) : Acceleration vector \\(\\vec{r}\\) : Position vector \\(r = \\sqrt{x^2 + y^2}\\) This is a central force problem , often solved using numerical methods like Euler or Runge-Kutta.","title":"3.1.2 Mathematical Model (Force and Acceleration)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#313-real-world-trajectories","text":"Trajectory Type Required Speed (from LEO) Real-World Example Suborbital < 7.8 km/s Blue Origin space tourism Orbital (Circular) \u2248 7.8 km/s Satellites, ISS Elliptical Orbit 7.8 \u2013 11.2 km/s Geostationary satellites, transfer orbits Escape (Hyperbolic) > 11.2 km/s Voyager, Mars rovers LEO : Low Earth Orbit ISS : International Space Station","title":"3.1.3 \ud83d\ude80 Real-World Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#314-key-equations","text":"","title":"3.1.4 \u2705 Key Equations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#newtons-law-of-gravitation-vector-form","text":"\\[ \\vec{F}_g = -\\frac{GMm}{r^2} \\hat{r} \\] \\(\\hat{r}\\) : Unit vector in radial direction Negative sign means the force is attractive (toward Earth)","title":"Newton\u2019s Law of Gravitation (Vector Form):"},{"location":"1%20Physics/2%20Gravity/Problem_3/#newtons-second-law","text":"\\[ \\vec{a} = \\frac{\\vec{F}}{m} = -\\frac{GM}{r^3} \\vec{r} \\]","title":"Newton\u2019s Second Law:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion-2d-form","text":"\\[ \\frac{d^2x}{dt^2} = -\\frac{GMx}{(x^2 + y^2)^{3/2}}, \\quad \\frac{d^2y}{dt^2} = -\\frac{GMy}{(x^2 + y^2)^{3/2}} \\] These are solved using numerical methods (e.g., Euler integration) in Python simulations.","title":"Equations of Motion (2D Form):"},{"location":"1%20Physics/2%20Gravity/Problem_3/#visualization","text":"Numerical simulations can visualize trajectories like: Arcs (suborbital) Circles and ellipses (orbital) Hyperbolas (escape) Would you like this formatted into a PDF or PowerPoint presentation ?","title":"\ud83d\udcc8 Visualization:"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Sure! Here's your content rewritten concisely in clear academic English with paragraph structure and phrasing (pharase-ed) for use in a report or presentation \u2014 no mathematical or technical changes have been made, as requested: Problem 1: Interference of Circular Waves 1.1 Overview The aim of this problem is to investigate the interference patterns produced by circular waves that originate from the vertices of a regular polygon , such as a triangle, square, or pentagon. As these wavefronts propagate outward and interact, they form distinct regions of constructive interference \u2014where the wave amplitudes reinforce each other\u2014and destructive interference , where they cancel out. This setup provides insight into how spatial symmetry and phase relationships influence wave behavior. 1.2 Mathematical Model Each point source emits a circular wave that can be described by the following formula: \\[ \\eta(x, y, t) = \\frac{A}{\\sqrt{r}} \\cos(kr - \\omega t + \\phi) \\] In this expression: \\(r = \\sqrt{(x - x_0)^2 + (y - y_0)^2}\\) is the distance from the observation point \\((x, y)\\) to the source position \\((x_0, y_0)\\) , \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number, where \\(\\lambda\\) is the wavelength, \\(\\omega = 2\\pi f\\) is the angular frequency, with \\(f\\) being the frequency of oscillation, \\(A\\) is the amplitude of the wave, \\(\\phi\\) is the initial phase offset. The term \\(1/\\sqrt{r}\\) accounts for the decay in amplitude with distance in a two-dimensional wave propagation model. 1.3 Superposition of Multiple Sources To model the overall wave pattern resulting from \\(N\\) such point sources, the principle of superposition is applied. The total displacement at any given point is the sum of displacements from all individual sources: \\[ \\eta_{\\text{sum}}(x, y, t) = \\sum_{i=1}^{N} \\eta_i(x, y, t) \\] This allows for the simulation and analysis of complex wave interactions in two-dimensional space. Let me know if you'd like to continue formatting the rest of the problems in this style.","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1-interference-of-circular-waves","text":"","title":"Problem 1: Interference of Circular Waves"},{"location":"1%20Physics/3%20Waves/Problem_1/#11-overview","text":"The aim of this problem is to investigate the interference patterns produced by circular waves that originate from the vertices of a regular polygon , such as a triangle, square, or pentagon. As these wavefronts propagate outward and interact, they form distinct regions of constructive interference \u2014where the wave amplitudes reinforce each other\u2014and destructive interference , where they cancel out. This setup provides insight into how spatial symmetry and phase relationships influence wave behavior.","title":"1.1 Overview"},{"location":"1%20Physics/3%20Waves/Problem_1/#12-mathematical-model","text":"Each point source emits a circular wave that can be described by the following formula: \\[ \\eta(x, y, t) = \\frac{A}{\\sqrt{r}} \\cos(kr - \\omega t + \\phi) \\] In this expression: \\(r = \\sqrt{(x - x_0)^2 + (y - y_0)^2}\\) is the distance from the observation point \\((x, y)\\) to the source position \\((x_0, y_0)\\) , \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number, where \\(\\lambda\\) is the wavelength, \\(\\omega = 2\\pi f\\) is the angular frequency, with \\(f\\) being the frequency of oscillation, \\(A\\) is the amplitude of the wave, \\(\\phi\\) is the initial phase offset. The term \\(1/\\sqrt{r}\\) accounts for the decay in amplitude with distance in a two-dimensional wave propagation model.","title":"1.2 Mathematical Model"},{"location":"1%20Physics/3%20Waves/Problem_1/#13-superposition-of-multiple-sources","text":"To model the overall wave pattern resulting from \\(N\\) such point sources, the principle of superposition is applied. The total displacement at any given point is the sum of displacements from all individual sources: \\[ \\eta_{\\text{sum}}(x, y, t) = \\sum_{i=1}^{N} \\eta_i(x, y, t) \\] This allows for the simulation and analysis of complex wave interactions in two-dimensional space. Let me know if you'd like to continue formatting the rest of the problems in this style.","title":"1.3 Superposition of Multiple Sources"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1 Electromangetism\u00b6 Mathematical Formulation The Lorentz force acting on a charged particle is given by: \ud835\udc39 \u20d7 = \ud835\udc5e ( \ud835\udc38 \u20d7 + \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) F =q( E + v \u00d7 B ) In the case of only a uniform magnetic field (i.e., \ud835\udc38 \u20d7 = 0 E =0), the force becomes: \ud835\udc39 \u20d7 = \ud835\udc5e ( \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) F =q( v \u00d7 B ) According to Newton's second law: \ud835\udc5a \ud835\udc51 \ud835\udc63 \u20d7 \ud835\udc51 \ud835\udc61 = \ud835\udc5e ( \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) m dt d v \u200b =q( v \u00d7 B ) This results in circular motion when the velocity is perpendicular to the magnetic field.","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"Electromangetism\u00b6 Mathematical Formulation The Lorentz force acting on a charged particle is given by: \ud835\udc39 \u20d7 = \ud835\udc5e ( \ud835\udc38 \u20d7 + \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) F =q( E + v \u00d7 B ) In the case of only a uniform magnetic field (i.e., \ud835\udc38 \u20d7 = 0 E =0), the force becomes: \ud835\udc39 \u20d7 = \ud835\udc5e ( \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) F =q( v \u00d7 B ) According to Newton's second law: \ud835\udc5a \ud835\udc51 \ud835\udc63 \u20d7 \ud835\udc51 \ud835\udc61 = \ud835\udc5e ( \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) m dt d v \u200b =q( v \u00d7 B ) This results in circular motion when the velocity is perpendicular to the magnetic field.","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1 ir ccuits 1.1 \ud83d\udd39 Mathematical Concepts 1. Series Rule: Resistors in series simply add: \ud835\udc45 eq = \ud835\udc45 1 + \ud835\udc45 2 + \u22ef + \ud835\udc45 \ud835\udc5b R eq \u200b =R 1 \u200b +R 2 \u200b +\u22ef+R n \u200b Parallel Rule: Resistors in parallel combine reciprocally: 1 \ud835\udc45 eq = 1 \ud835\udc45 1 + 1 \ud835\udc45 2 + \u22ef + 1 \ud835\udc45 \ud835\udc5b R eq \u200b 1 \u200b = R 1 \u200b 1 \u200b + R 2 \u200b 1 \u200b +\u22ef+ R n \u200b 1 \u200b \ud83d\udd39 Algorithm Description (English) Step-by-step outline: Input: A graph \ud835\udc3a = ( \ud835\udc49 , \ud835\udc38 ) G=(V,E) with resistors as edge weights. Identify series connections: Look for nodes with exactly 2 neighbors (degree = 2). Combine the two connecting resistors in series. Identify parallel connections: Find multiple edges between the same two nodes. Combine them using the parallel rule. Reduce the graph iteratively until only 2 nodes remain: the source and target. Return the final resistance between these nodes. import networkx as nx def combine_parallel_resistors(resistances): # Combine resistances in parallel: 1/R = 1/R1 + 1/R2 + ... inverse_total = sum(1/r for r in resistances) return 1 / inverse_total if inverse_total != 0 else float('inf') def simplify_circuit(G): # Combine parallel resistors edges_to_check = list(G.edges(data=True)) edge_dict = {} for u, v, data in edges_to_check: key = tuple(sorted((u, v))) if key not in edge_dict: edge_dict[key] = [] edge_dict[key].append(data['resistance']) # Rebuild the graph with combined resistors H = nx.Graph() for (u, v), resistances in edge_dict.items(): if len(resistances) == 1: R_eq = resistances[0] else: R_eq = combine_parallel_resistors(resistances) H.add_edge(u, v, resistance=R_eq) return H Example usage G = nx.MultiGraph() G.add_edge('A', 'B', resistance=2) G.add_edge('A', 'B', resistance=3) G.add_edge('B', 'C', resistance=4) simplified = simplify_circuit(G) for u, v, data in simplified.edges(data=True): print(f\"Edge {u}-{v}: {data['resistance']} Ohms\") 1.2 Create a Python program that: Accepts any circuit as a graph (nodes = junctions, edges = resistors), Handles series, parallel, and nested combinations, Calculates total equivalent resistance between two given nodes. We'll use NetworkX to manage graph structure. \ud83d\udd27 Approach \ud83d\udccc 1. Definitions Series: Node with degree 2, not a start/end node \u2192 combine resistors. Parallel: Multiple edges between same two nodes \u2192 combine resistors in parallel. Repeat these reductions until only two nodes remain: the source and target. import networkx as nx def combine_parallel(resistances): inverse = sum(1/r for r in resistances) return 1 / inverse if inverse != 0 else float('inf') def simplify_parallel(G): \"\"\"Simplify all parallel edges between the same pair of nodes.\"\"\" new_G = nx.Graph() edge_map = {} for u, v, data in G.edges(data=True): key = tuple(sorted((u, v))) edge_map.setdefault(key, []).append(data['resistance']) for (u, v), res_list in edge_map.items(): if len(res_list) == 1: R_eq = res_list[0] else: R_eq = combine_parallel(res_list) new_G.add_edge(u, v, resistance=R_eq) return new_G def simplify_series(G, source, target): \"\"\"Collapse series nodes (degree 2 and not source/target).\"\"\" changed = True while changed: changed = False for node in list(G.nodes): if node in (source, target): continue neighbors = list(G.neighbors(node)) if len(neighbors) == 2: u, v = neighbors R1 = G[node][u]['resistance'] R2 = G[node][v]['resistance'] R_new = R1 + R2 G.remove_node(node) G.add_edge(u, v, resistance=R_new) changed = True break return G def calculate_equivalent_resistance(G, source, target): G = simplify_parallel(G) G = simplify_series(G, source, target) if G.has_edge(source, target): return G[source][target]['resistance'] else: return float('inf') # disconnected --------------------- \ud83d\udd2c EXAMPLES --------------------- Example 1: Simple Series G1 = nx.MultiGraph() G1.add_edge('A', 'B', resistance=2) G1.add_edge('B', 'C', resistance=3) G1 = simplify_parallel(G1) R1 = calculate_equivalent_resistance(G1, 'A', 'C') print(\"Example 1 (Series): R_eq =\", R1) Example 2: Simple Parallel G2 = nx.MultiGraph() G2.add_edge('A', 'B', resistance=2) G2.add_edge('A', 'B', resistance=4) G2 = simplify_parallel(G2) R2 = calculate_equivalent_resistance(G2, 'A', 'B') print(\"Example 2 (Parallel): R_eq =\", R2) Example 3: Nested Combination G3 = nx.MultiGraph() G3.add_edge('A', 'B', resistance=1) G3.add_edge('B', 'C', resistance=1) G3.add_edge('C', 'D', resistance=1) G3.add_edge('A', 'D', resistance=2) # Parallel to path A-B-C-D G3 = simplify_parallel(G3) R3 = calculate_equivalent_resistance(G3, 'A', 'D') print(\"Example 3 (Nested): R_eq =\", R3)","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"ir ccuits 1.1 \ud83d\udd39 Mathematical Concepts 1. Series Rule: Resistors in series simply add: \ud835\udc45 eq = \ud835\udc45 1 + \ud835\udc45 2 + \u22ef + \ud835\udc45 \ud835\udc5b R eq \u200b =R 1 \u200b +R 2 \u200b +\u22ef+R n \u200b Parallel Rule: Resistors in parallel combine reciprocally: 1 \ud835\udc45 eq = 1 \ud835\udc45 1 + 1 \ud835\udc45 2 + \u22ef + 1 \ud835\udc45 \ud835\udc5b R eq \u200b 1 \u200b = R 1 \u200b 1 \u200b + R 2 \u200b 1 \u200b +\u22ef+ R n \u200b 1 \u200b \ud83d\udd39 Algorithm Description (English) Step-by-step outline: Input: A graph \ud835\udc3a = ( \ud835\udc49 , \ud835\udc38 ) G=(V,E) with resistors as edge weights. Identify series connections: Look for nodes with exactly 2 neighbors (degree = 2). Combine the two connecting resistors in series. Identify parallel connections: Find multiple edges between the same two nodes. Combine them using the parallel rule. Reduce the graph iteratively until only 2 nodes remain: the source and target. Return the final resistance between these nodes. import networkx as nx def combine_parallel_resistors(resistances): # Combine resistances in parallel: 1/R = 1/R1 + 1/R2 + ... inverse_total = sum(1/r for r in resistances) return 1 / inverse_total if inverse_total != 0 else float('inf') def simplify_circuit(G): # Combine parallel resistors edges_to_check = list(G.edges(data=True)) edge_dict = {} for u, v, data in edges_to_check: key = tuple(sorted((u, v))) if key not in edge_dict: edge_dict[key] = [] edge_dict[key].append(data['resistance']) # Rebuild the graph with combined resistors H = nx.Graph() for (u, v), resistances in edge_dict.items(): if len(resistances) == 1: R_eq = resistances[0] else: R_eq = combine_parallel_resistors(resistances) H.add_edge(u, v, resistance=R_eq) return H","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-usage","text":"G = nx.MultiGraph() G.add_edge('A', 'B', resistance=2) G.add_edge('A', 'B', resistance=3) G.add_edge('B', 'C', resistance=4) simplified = simplify_circuit(G) for u, v, data in simplified.edges(data=True): print(f\"Edge {u}-{v}: {data['resistance']} Ohms\") 1.2 Create a Python program that: Accepts any circuit as a graph (nodes = junctions, edges = resistors), Handles series, parallel, and nested combinations, Calculates total equivalent resistance between two given nodes. We'll use NetworkX to manage graph structure. \ud83d\udd27 Approach \ud83d\udccc 1. Definitions Series: Node with degree 2, not a start/end node \u2192 combine resistors. Parallel: Multiple edges between same two nodes \u2192 combine resistors in parallel. Repeat these reductions until only two nodes remain: the source and target. import networkx as nx def combine_parallel(resistances): inverse = sum(1/r for r in resistances) return 1 / inverse if inverse != 0 else float('inf') def simplify_parallel(G): \"\"\"Simplify all parallel edges between the same pair of nodes.\"\"\" new_G = nx.Graph() edge_map = {} for u, v, data in G.edges(data=True): key = tuple(sorted((u, v))) edge_map.setdefault(key, []).append(data['resistance']) for (u, v), res_list in edge_map.items(): if len(res_list) == 1: R_eq = res_list[0] else: R_eq = combine_parallel(res_list) new_G.add_edge(u, v, resistance=R_eq) return new_G def simplify_series(G, source, target): \"\"\"Collapse series nodes (degree 2 and not source/target).\"\"\" changed = True while changed: changed = False for node in list(G.nodes): if node in (source, target): continue neighbors = list(G.neighbors(node)) if len(neighbors) == 2: u, v = neighbors R1 = G[node][u]['resistance'] R2 = G[node][v]['resistance'] R_new = R1 + R2 G.remove_node(node) G.add_edge(u, v, resistance=R_new) changed = True break return G def calculate_equivalent_resistance(G, source, target): G = simplify_parallel(G) G = simplify_series(G, source, target) if G.has_edge(source, target): return G[source][target]['resistance'] else: return float('inf') # disconnected","title":"Example usage"},{"location":"1%20Physics/5%20Circuits/Problem_1/#-","text":"","title":"---------------------"},{"location":"1%20Physics/5%20Circuits/Problem_1/#examples","text":"","title":"\ud83d\udd2c EXAMPLES"},{"location":"1%20Physics/5%20Circuits/Problem_1/#-_1","text":"","title":"---------------------"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-1-simple-series","text":"G1 = nx.MultiGraph() G1.add_edge('A', 'B', resistance=2) G1.add_edge('B', 'C', resistance=3) G1 = simplify_parallel(G1) R1 = calculate_equivalent_resistance(G1, 'A', 'C') print(\"Example 1 (Series): R_eq =\", R1)","title":"Example 1: Simple Series"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-2-simple-parallel","text":"G2 = nx.MultiGraph() G2.add_edge('A', 'B', resistance=2) G2.add_edge('A', 'B', resistance=4) G2 = simplify_parallel(G2) R2 = calculate_equivalent_resistance(G2, 'A', 'B') print(\"Example 2 (Parallel): R_eq =\", R2)","title":"Example 2: Simple Parallel"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-3-nested-combination","text":"G3 = nx.MultiGraph() G3.add_edge('A', 'B', resistance=1) G3.add_edge('B', 'C', resistance=1) G3.add_edge('C', 'D', resistance=1) G3.add_edge('A', 'D', resistance=2) # Parallel to path A-B-C-D G3 = simplify_parallel(G3) R3 = calculate_equivalent_resistance(G3, 'A', 'D') print(\"Example 3 (Nested): R_eq =\", R3)","title":"Example 3: Nested Combination"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"statitics 1.1 Mathematical Foundation (Population Distribution) Let \ud835\udc4b X be a random variable drawn from a population distribution with: Mean: \ud835\udf07 = \ud835\udc38 [ \ud835\udc4b ] \u03bc=E[X] Variance: \ud835\udf0e 2 = Var ( \ud835\udc4b ) \u03c3 2 =Var(X) We define the sample mean for a sample of size \ud835\udc5b n as: \ud835\udc4b \u02c9 \ud835\udc5b = 1 \ud835\udc5b \u2211 \ud835\udc56 = 1 \ud835\udc5b \ud835\udc4b \ud835\udc56 X \u02c9 n \u200b = n 1 \u200b i=1 \u2211 n \u200b X i \u200b According to the Central Limit Theorem, as \ud835\udc5b \u2192 \u221e n\u2192\u221e, the distribution of \ud835\udc4b \u02c9 \ud835\udc5b X \u02c9 n \u200b tends toward: \ud835\udc4b \u02c9 \ud835\udc5b \u223c \ud835\udc41 ( \ud835\udf07 , \ud835\udf0e 2 \ud835\udc5b ) X \u02c9 n \u200b \u223cN(\u03bc, n \u03c3 2 \u200b ) 1.2 Mathematical Background Given a population with mean \ud835\udf07 \u03bc and variance \ud835\udf0e 2 \u03c3 2 , the sampling distribution of the sample mean for sample size \ud835\udc5b n is: \ud835\udc4b \u02c9 \ud835\udc5b = 1 \ud835\udc5b \u2211 \ud835\udc56 = 1 \ud835\udc5b \ud835\udc4b \ud835\udc56 \u223c \ud835\udc41 ( \ud835\udf07 , \ud835\udf0e 2 \ud835\udc5b ) as \ud835\udc5b \u2192 \u221e X \u02c9 n \u200b = n 1 \u200b i=1 \u2211 n \u200b X i \u200b \u223cN(\u03bc, n \u03c3 2 \u200b )as n\u2192\u221e This means regardless of the original distribution, the distribution of sample means will tend to a normal distribution as sample size increases.","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"}]}