{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Mathematical Formulation of Projectile Motion 1.1 Governing Equations of Motion Based on Newton\u2019s Second Law , and assuming no air resistance: \\[ F = ma = -mg\\hat{y} \\] This leads to two differential equations: Horizontal: $$ \\frac{d^2x}{dt^2} = 0 $$ Vertical: $$ \\frac{d^2y}{dt^2} = -g $$ 2. Solving the Equations Initial conditions: Position: \\((x_0, y_0) = (0, y_0)\\) Velocity: \\(v_0\\) at angle \\(\\theta\\) Components: $$ v_{0x} = v_0 \\cos\\theta, \\quad v_{0y} = v_0 \\sin\\theta $$ Solutions: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] \\[ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] 3. Time of Flight To find when the projectile hits the ground \\(y(t) = 0\\) : If \\(y_0 = 0\\) : \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2g y_0}}{g} \\] 4. Range Calculation \\(y_0 = 0\\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] \\(y_0 \\neq 0\\) : \\[ R = v_0 \\cos\\theta \\cdot t \\] Where \\(t\\) is the total time of flight. 5. Maximum Height \\(y_0 = 0\\) : \\[ H = \\frac{v_0^2 \\sin^2\\theta}{2g} \\] \\(y_0 \\neq 0\\) : \\[ H = y_0 + \\frac{v_0^2 \\sin^2\\theta}{2g} \\] 6. Optimal Launch Angle For maximum range (when \\(y_0 = 0\\) ): \\[ \\theta_{\\text{optimal}} = 45^\\circ \\] For \\(y_0 > 0\\) : \\[ \\theta_{\\text{optimal}} \\approx 45^\\circ - \\frac{y_0}{v_0^2} \\cdot k \\] 1.2 Range vs. Launch Angle \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] Key Insights: Launch Angle: Max range at \\(\\theta = 45^\\circ\\) Symmetry: \\(R(\\theta) = R(90^\\circ - \\theta)\\) Initial Velocity: \\(R \\propto v_0^2\\) Gravity: \\(R \\propto \\frac{1}{g}\\) Initial Height \\(y_0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2gy_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\] 3. Observations from Graphs Increasing \\(v_0\\) raises both peak and range. Higher \\(y_0\\) shifts optimal angle below \\(45^\\circ\\) . 4. Limitations & Extensions Limitations: No air resistance No wind Flat terrain Possible Extensions: Drag force: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Wind effects * Numerical models 5. Conclusion Max range at \\(45^\\circ\\) Higher \\(v_0\\) \u2192 longer range Higher \\(y_0\\) \u2192 optimal angle < \\(45^\\circ\\) Lower gravity \u2192 longer range 1.3 Angle vs. Range Analysis Projectile motion is governed by: \\[ F = ma \\] Equations of Motion: Horizontal: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ * Vertical: $$ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time of Flight (if \\(y_0 = 0\\) ): \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] Range: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2 g y_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\] Applications Sports: Optimal shots in basketball, soccer, golf. Military: Artillery, missiles. Aerospace: Planetary landing, satellite launches. Limitations & Further Work Limits: No drag No wind Level ground Future Improvements: Include air resistance: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Simulate wind effects * Use numerical methods","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#mathematical-formulation-of-projectile-motion","text":"","title":"Mathematical Formulation of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-governing-equations-of-motion","text":"Based on Newton\u2019s Second Law , and assuming no air resistance: \\[ F = ma = -mg\\hat{y} \\] This leads to two differential equations: Horizontal: $$ \\frac{d^2x}{dt^2} = 0 $$ Vertical: $$ \\frac{d^2y}{dt^2} = -g $$","title":"1.1 Governing Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-solving-the-equations","text":"Initial conditions: Position: \\((x_0, y_0) = (0, y_0)\\) Velocity: \\(v_0\\) at angle \\(\\theta\\) Components: $$ v_{0x} = v_0 \\cos\\theta, \\quad v_{0y} = v_0 \\sin\\theta $$ Solutions: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] \\[ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\]","title":"2. Solving the Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-time-of-flight","text":"To find when the projectile hits the ground \\(y(t) = 0\\) : If \\(y_0 = 0\\) : \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2g y_0}}{g} \\]","title":"3. Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-range-calculation","text":"\\(y_0 = 0\\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] \\(y_0 \\neq 0\\) : \\[ R = v_0 \\cos\\theta \\cdot t \\] Where \\(t\\) is the total time of flight.","title":"4. Range Calculation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-maximum-height","text":"\\(y_0 = 0\\) : \\[ H = \\frac{v_0^2 \\sin^2\\theta}{2g} \\] \\(y_0 \\neq 0\\) : \\[ H = y_0 + \\frac{v_0^2 \\sin^2\\theta}{2g} \\]","title":"5. Maximum Height"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-optimal-launch-angle","text":"For maximum range (when \\(y_0 = 0\\) ): \\[ \\theta_{\\text{optimal}} = 45^\\circ \\] For \\(y_0 > 0\\) : \\[ \\theta_{\\text{optimal}} \\approx 45^\\circ - \\frac{y_0}{v_0^2} \\cdot k \\]","title":"6. Optimal Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-range-vs-launch-angle","text":"\\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] Key Insights: Launch Angle: Max range at \\(\\theta = 45^\\circ\\) Symmetry: \\(R(\\theta) = R(90^\\circ - \\theta)\\) Initial Velocity: \\(R \\propto v_0^2\\) Gravity: \\(R \\propto \\frac{1}{g}\\) Initial Height \\(y_0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2gy_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\]","title":"1.2 Range vs. Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-observations-from-graphs","text":"Increasing \\(v_0\\) raises both peak and range. Higher \\(y_0\\) shifts optimal angle below \\(45^\\circ\\) .","title":"3. Observations from Graphs"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-limitations-extensions","text":"Limitations: No air resistance No wind Flat terrain Possible Extensions: Drag force: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Wind effects * Numerical models","title":"4. Limitations &amp; Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-conclusion","text":"Max range at \\(45^\\circ\\) Higher \\(v_0\\) \u2192 longer range Higher \\(y_0\\) \u2192 optimal angle < \\(45^\\circ\\) Lower gravity \u2192 longer range","title":"5. Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-angle-vs-range-analysis","text":"Projectile motion is governed by: \\[ F = ma \\] Equations of Motion: Horizontal: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ * Vertical: $$ y(t) = y_0 + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Time of Flight (if \\(y_0 = 0\\) ): \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] Range: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] If \\(y_0 \\neq 0\\) : \\[ t = \\frac{v_0 \\sin\\theta + \\sqrt{(v_0 \\sin\\theta)^2 + 2 g y_0}}{g} \\] \\[ R = v_0 \\cos\\theta \\cdot t \\]","title":"1.3 Angle vs. Range Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#applications","text":"Sports: Optimal shots in basketball, soccer, golf. Military: Artillery, missiles. Aerospace: Planetary landing, satellite launches.","title":"Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-further-work","text":"Limits: No drag No wind Level ground Future Improvements: Include air resistance: $$ F_{\\text{drag}} = \\frac{1}{2} C_d \\rho A v^2 $$ * Simulate wind effects * Use numerical methods","title":"Limitations &amp; Further Work"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2: Forced Damped Pendulum 1.1 Theoretical Foundation \u2705 Differential Equation: The motion of a forced damped pendulum is governed by: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles \\(\\theta \\approx \\sin(\\theta)\\) , it simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] 2.1.2 Analysis of Dynamics This is the nonlinear form of the differential equation (no approximation): \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Used to study chaotic motion and resonance behavior in the full system. 2.1.3 Practical Applications Simulations of real-world systems (e.g., mechanical oscillators) can be modeled using the same equation : \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Parameters (\u03b2, \u03c9\u2080, A, \u03c9) are varied to reflect different scenarios. 2.1.4 Phase Portrait & Poincar\u00e9 Section We analyze system dynamics using: Phase Portraits: \\(\\theta\\) vs. \\(\\dot{\\theta}\\) Poincar\u00e9 Sections: sampled state at regular intervals Governing equation (nonlinear form) again: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\]","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2-forced-damped-pendulum","text":"","title":"Problem 2: Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-theoretical-foundation","text":"","title":"1.1 Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation","text":"The motion of a forced damped pendulum is governed by: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles \\(\\theta \\approx \\sin(\\theta)\\) , it simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\]","title":"\u2705 Differential Equation:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#212-analysis-of-dynamics","text":"This is the nonlinear form of the differential equation (no approximation): \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Used to study chaotic motion and resonance behavior in the full system.","title":"2.1.2 Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#213-practical-applications","text":"Simulations of real-world systems (e.g., mechanical oscillators) can be modeled using the same equation : \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Parameters (\u03b2, \u03c9\u2080, A, \u03c9) are varied to reflect different scenarios.","title":"2.1.3 Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#214-phase-portrait-poincare-section","text":"We analyze system dynamics using: Phase Portraits: \\(\\theta\\) vs. \\(\\dot{\\theta}\\) Poincar\u00e9 Sections: sampled state at regular intervals Governing equation (nonlinear form) again: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\]","title":"2.1.4 Phase Portrait &amp; Poincar\u00e9 Section"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Great, let\u2019s break this task into the four key parts: 1. Deriving the Relationship (Kepler\u2019s Third Law for Circular Orbits) Newton's Law of Universal Gravitation: For two bodies (like a planet and its satellite), \\[ F = \\frac{G M m}{r^2} \\] Where: \\(G\\) = gravitational constant \\(M\\) = mass of central body (e.g., Earth, Sun) \\(m\\) = mass of orbiting body (e.g., Moon, satellite) \\(r\\) = orbital radius Centripetal Force for Circular Motion: \\[ F = \\frac{m v^2}{r} \\] Equating Gravitational and Centripetal Forces: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\Rightarrow v^2 = \\frac{G M}{r} \\] Now, express orbital velocity \\(v\\) in terms of the period \\(T\\) : \\[ v = \\frac{2 \\pi r}{T} \\Rightarrow \\left(\\frac{2 \\pi r}{T}\\right)^2 = \\frac{G M}{r} \\] Simplify: \\[ \\frac{4 \\pi^2 r^2}{T^2} = \\frac{G M}{r} \\Rightarrow T^2 = \\frac{4 \\pi^2 r^3}{G M} \\] \u2705 Kepler\u2019s Third Law (Circular Orbit Form): \\[ T^2 \\propto r^3 \\] 2. Implications for Astronomy a. Mass Determination: Rearranging the formula: \\[ M = \\frac{4 \\pi^2 r^3}{G T^2} \\] This allows astronomers to calculate the mass of a central body (like the Earth or the Sun) using observations of satellite or planetary orbits. b. Distance Estimation: If we know the orbital period and the mass of the central body, we can solve for orbital radius \\(r\\) . c. System Characterization: Used to classify and understand multi-body systems such as: Exoplanets around stars Moons around planets Satellites around Earth 3. Real-World Examples a. Moon Orbiting Earth \\(T \\approx 27.3\\) days \\(= 2.36 \\times 10^6\\) s \\(r \\approx 3.84 \\times 10^8\\) m Earth mass from this: \\[ M = \\frac{4 \\pi^2 r^3}{G T^2} \\approx 5.97 \\times 10^{24} \\text{ kg} \\] b. Planets in the Solar System Using ratios (e.g., Earth vs. Mars): \\[ \\left(\\frac{T_1}{T_2}\\right)^2 = \\left(\\frac{r_1}{r_2}\\right)^3 \\] Holds well when measured. 4. Computational Model to Simulate and Verify We can simulate several orbiting bodies and numerically test if \\(T^2 \\propto r^3\\) . Here's a basic Python simulation using matplotlib and numpy : import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # gravitational constant M = 1.989e30 # mass of the Sun in kg # Generate radii (in meters) and calculate periods radii = np.linspace(0.3, 30, 100) * 1.496e11 # 0.3 AU to 30 AU T_squared = [] R_cubed = [] for r in radii: T = 2 * np.pi * np.sqrt(r**3 / (G * M)) T_squared.append(T**2) R_cubed.append(r**3) # Plot T^2 vs r^3 plt.figure(figsize=(8,6)) plt.plot(R_cubed, T_squared, label=r'$T^2$ vs $r^3$', color='blue') plt.xlabel('Orbital Radius Cubed $r^3$ (m\u00b3)') plt.ylabel('Orbital Period Squared $T^2$ (s\u00b2)') plt.title(\"Verification of Kepler's Third Law\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() \u2705 Summary Derived : \\(T^2 = \\frac{4 \\pi^2 r^3}{GM}\\) Implications : Enables mass/distance determination in astronomy. Examples : Moon-Earth system, planetary orbits. Model : Simulated and verified using a Python plot \u2014 confirms the linearity of \\(T^2\\) vs. \\(r^3\\) . Would you like to explore adding elliptical orbits, or implementing an interactive orbit simulator next?","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-deriving-the-relationship-keplers-third-law-for-circular-orbits","text":"","title":"1. Deriving the Relationship (Kepler\u2019s Third Law for Circular Orbits)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#newtons-law-of-universal-gravitation","text":"For two bodies (like a planet and its satellite), \\[ F = \\frac{G M m}{r^2} \\] Where: \\(G\\) = gravitational constant \\(M\\) = mass of central body (e.g., Earth, Sun) \\(m\\) = mass of orbiting body (e.g., Moon, satellite) \\(r\\) = orbital radius","title":"Newton's Law of Universal Gravitation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#centripetal-force-for-circular-motion","text":"\\[ F = \\frac{m v^2}{r} \\]","title":"Centripetal Force for Circular Motion:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#equating-gravitational-and-centripetal-forces","text":"\\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\Rightarrow v^2 = \\frac{G M}{r} \\] Now, express orbital velocity \\(v\\) in terms of the period \\(T\\) : \\[ v = \\frac{2 \\pi r}{T} \\Rightarrow \\left(\\frac{2 \\pi r}{T}\\right)^2 = \\frac{G M}{r} \\] Simplify: \\[ \\frac{4 \\pi^2 r^2}{T^2} = \\frac{G M}{r} \\Rightarrow T^2 = \\frac{4 \\pi^2 r^3}{G M} \\]","title":"Equating Gravitational and Centripetal Forces:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-circular-orbit-form","text":"\\[ T^2 \\propto r^3 \\]","title":"\u2705 Kepler\u2019s Third Law (Circular Orbit Form):"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-implications-for-astronomy","text":"","title":"2. Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#a-mass-determination","text":"Rearranging the formula: \\[ M = \\frac{4 \\pi^2 r^3}{G T^2} \\] This allows astronomers to calculate the mass of a central body (like the Earth or the Sun) using observations of satellite or planetary orbits.","title":"a. Mass Determination:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#b-distance-estimation","text":"If we know the orbital period and the mass of the central body, we can solve for orbital radius \\(r\\) .","title":"b. Distance Estimation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#c-system-characterization","text":"Used to classify and understand multi-body systems such as: Exoplanets around stars Moons around planets Satellites around Earth","title":"c. System Characterization:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-examples","text":"","title":"3. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#a-moon-orbiting-earth","text":"\\(T \\approx 27.3\\) days \\(= 2.36 \\times 10^6\\) s \\(r \\approx 3.84 \\times 10^8\\) m Earth mass from this: \\[ M = \\frac{4 \\pi^2 r^3}{G T^2} \\approx 5.97 \\times 10^{24} \\text{ kg} \\]","title":"a. Moon Orbiting Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#b-planets-in-the-solar-system","text":"Using ratios (e.g., Earth vs. Mars): \\[ \\left(\\frac{T_1}{T_2}\\right)^2 = \\left(\\frac{r_1}{r_2}\\right)^3 \\] Holds well when measured.","title":"b. Planets in the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-computational-model-to-simulate-and-verify","text":"We can simulate several orbiting bodies and numerically test if \\(T^2 \\propto r^3\\) . Here's a basic Python simulation using matplotlib and numpy : import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # gravitational constant M = 1.989e30 # mass of the Sun in kg # Generate radii (in meters) and calculate periods radii = np.linspace(0.3, 30, 100) * 1.496e11 # 0.3 AU to 30 AU T_squared = [] R_cubed = [] for r in radii: T = 2 * np.pi * np.sqrt(r**3 / (G * M)) T_squared.append(T**2) R_cubed.append(r**3) # Plot T^2 vs r^3 plt.figure(figsize=(8,6)) plt.plot(R_cubed, T_squared, label=r'$T^2$ vs $r^3$', color='blue') plt.xlabel('Orbital Radius Cubed $r^3$ (m\u00b3)') plt.ylabel('Orbital Period Squared $T^2$ (s\u00b2)') plt.title(\"Verification of Kepler's Third Law\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"4. Computational Model to Simulate and Verify"},{"location":"1%20Physics/2%20Gravity/Problem_1/#summary","text":"Derived : \\(T^2 = \\frac{4 \\pi^2 r^3}{GM}\\) Implications : Enables mass/distance determination in astronomy. Examples : Moon-Earth system, planetary orbits. Model : Simulated and verified using a Python plot \u2014 confirms the linearity of \\(T^2\\) vs. \\(r^3\\) . Would you like to explore adding elliptical orbits, or implementing an interactive orbit simulator next?","title":"\u2705 Summary"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 gravity 2.1.1 Problem 2 \u2013 Task 1: Define the First, Second, and Third Cosmic Velocities \ud83d\udccc Definitions and Physical Meaning First Cosmic Velocity ( \ud835\udc63 1 v 1 \u200b ) \u2014 Orbital Velocity The minimum horizontal speed needed for an object to enter stable circular orbit near the surface of a planet (without propulsion). \ud835\udc63 1 = \ud835\udc3a \ud835\udc40 \ud835\udc5f v 1 \u200b = r GM \u200b \u200b Second Cosmic Velocity ( \ud835\udc63 2 v 2 \u200b ) \u2014 Escape Velocity The minimum speed required to break free from a planet\u2019s gravitational field without further propulsion. \ud835\udc63 2 = 2 \ud835\udc3a \ud835\udc40 \ud835\udc5f v 2 \u200b = r 2GM \u200b \u200b Third Cosmic Velocity ( \ud835\udc63 3 v 3 \u200b ) \u2014 Interstellar Escape Velocity The minimum speed needed to escape the gravitational pull of the Sun from Earth\u2019s orbit (i.e., to leave the solar system). \ud835\udc63 3 = \ud835\udc63 Earth orbit 2 + \ud835\udc63 2 2 v 3 \u200b = v Earth orbit 2 \u200b +v 2 2 \u200b \u200b Where: \ud835\udc63 Earth orbit \u2248 29.78 \u2009 km/s v Earth orbit \u200b \u224829.78km/s (orbital velocity of Earth around Sun), \ud835\udc63 2 \u2248 11.2 \u2009 km/s v 2 \u200b \u224811.2km/s (escape velocity from E code import numpy as np Gravitational constant G = 6.67430e-11 # m^3 kg^-1 s^-2 Define planets with mass (kg) and radius (m) planets = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.390e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.991e7} } Function to compute v1 and v2 def compute_cosmic_velocities(mass, radius): v1 = np.sqrt(G * mass / radius) # First cosmic velocity v2 = np.sqrt(2 * G * mass / radius) # Second cosmic velocity return v1, v2 Calculate and print for planet, data in planets.items(): v1, v2 = compute_cosmic_velocities(data[\"mass\"], data[\"radius\"]) print(f\"{planet}:\\n First Cosmic Velocity (v1): {v1/1000:.2f} km/s\\n Second Cosmic Velocity (v2): {v2/1000:.2f} km/s\\n\") output Earth: First Cosmic Velocity (v1): 7.91 km/s Second Cosmic Velocity (v2): 11.19 km/s Mars: First Cosmic Velocity (v1): 3.55 km/s Second Cosmic Velocity (v2): 5.03 km/s Jupiter: First Cosmic Velocity (v1): 42.06 km/s Second Cosmic Velocity (v2): 59.54 km/s 2.2 \u2705 Problem 2 \u2013 Task 2: Mathematical Derivations and Key Influences \ud83d\udd39 1. First Cosmic Velocity ( \ud835\udc63 1 v 1 \u200b ) \u2013 Orbital Velocity Goal: Derive the velocity for a stable circular orbit. Derivation: For an object in circular orbit, gravitational force provides the centripetal force: \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 = \ud835\udc5a \ud835\udc63 2 \ud835\udc5f r 2 GMm \u200b = r mv 2 \u200b Simplify and solve for \ud835\udc63 v: \ud835\udc63 1 = \ud835\udc3a \ud835\udc40 \ud835\udc5f v 1 \u200b = r GM \u200b \u200b Influencing Parameters: \ud835\udc3a G: Universal constant (fixed) \ud835\udc40 M: Mass of the planet/star \ud835\udc5f r: Distance from the center of mass \ud83d\udd39 2. Second Cosmic Velocity ( \ud835\udc63 2 v 2 \u200b ) \u2013 Escape Velocity Goal: Minimum speed to break free from gravity with no further propulsion. Derivation (energy balance): Kinetic Energy = Gravitational Potential Energy Kinetic Energy=Gravitational Potential Energy 1 2 \ud835\udc5a \ud835\udc63 2 = \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f \u21d2 \ud835\udc63 2 = 2 \ud835\udc3a \ud835\udc40 \ud835\udc5f 2 1 \u200b mv 2 = r GMm \u200b \u21d2v 2 \u200b = r 2GM \u200b \u200b Key Differences from \ud835\udc63 1 v 1 \u200b : Escape velocity is \u221a2 times the orbital velocity at the same radius: \ud835\udc63 2 = 2 \u22c5 \ud835\udc63 1 v 2 \u200b = 2 \u200b \u22c5v 1 \u200b \ud83d\udd39 3. Third Cosmic Velocity ( \ud835\udc63 3 v 3 \u200b ) \u2013 Escape Solar System This velocity depends on: Escape from Earth\u2019s gravity: \ud835\udc63 2 v 2 \u200b Speed to overcome Sun\u2019s gravity from Earth\u2019s orbit: \ud835\udc63 solar v solar \u200b Approximated as: \ud835\udc63 3 = \ud835\udc63 2 2 + \ud835\udc63 Earth orbit 2 v 3 \u200b = v 2 2 \u200b +v Earth orbit 2 \u200b \u200b Using: \ud835\udc63 2 \u2248 11.2 v 2 \u200b \u224811.2 km/s \ud835\udc63 Earth orbit \u2248 29.78 v Earth orbit \u200b \u224829.78 km/s \ud835\udc63 3 \u2248 ( 11.2 ) 2 + ( 29.78 ) 2 \u2248 32.7 km/s v 3 \u200b \u2248 (11.2) 2 +(29.78) 2 \u200b \u224832.7 km/s code import numpy as np Constants G = 6.67430e-11 # m^3 kg^-1 s^-2 M_sun = 1.989e30 # kg Orbital speed of Earth around Sun (for v3) v_earth_orbit = 29.78e3 # m/s Planet data: mass (kg), radius (m) planets = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.390e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.991e7} } Compute and print cosmic velocities for name, data in planets.items(): M = data[\"mass\"] r = data[\"radius\"] v1 = np.sqrt(G * M / r) # First cosmic velocity v2 = np.sqrt(2 * G * M / r) # Second cosmic velocity # For Earth, compute v3 using its orbital speed if name == \"Earth\": v3 = np.sqrt(v2**2 + v_earth_orbit**2) else: v3 = None print(f\"\\n{name}\") print(f\"First Cosmic Velocity (v1): {v1/1000:.2f} km/s\") print(f\"Second Cosmic Velocity (v2): {v2/1000:.2f} km/s\") if v3: print(f\"Third Cosmic Velocity (v3): {v3/1000:.2f} km/s\") ouput Earth First Cosmic Velocity (v1): 7.91 km/s Second Cosmic Velocity (v2): 11.19 km/s Third Cosmic Velocity (v3): 31.81 km/s Mars First Cosmic Velocity (v1): 3.55 km/s Second Cosmic Velocity (v2): 5.03 km/s Jupiter First Cosmic Velocity (v1): 42.57 km/s Second Cosmic Velocity (v2): 60.20 km/s 2.3 Task 3 \u2013 Analyze Real-World Examples for Cosmic Velocities \ud83c\udfaf Goal: Calculate and visualize the first, second, and third cosmic velocities for Earth, Mars, and Jupiter \u2014 and understand what they mean in the context of space exploration. \ud83e\uddee Real Data Used: Planet Mass (kg) Radius (m) Earth 5.972 \u00d7 10\u00b2\u2074 6.371 \u00d7 10\u2076 Mars 6.417 \u00d7 10\u00b2\u00b3 3.390 \u00d7 10\u2076 Jupiter 1.898 \u00d7 10\u00b2\u2077 6.991 \u00d7 10\u2077 \ud83d\udd22 Results (in km/s): Planet v\u2081 (orbit) v\u2082 (escape) v\u2083 (escape Solar System) Earth ~7.91 ~11.19 ~42.1 Mars ~3.55 ~5.03 N/A Jupiter ~42.07 ~59.54 N/A v\u2081: Needed to stay in a circular orbit near the surface v\u2082: Minimum speed to escape the planet\u2019s gravity v\u2083: Only calculated for Earth \u2014 it\u2019s the speed to escape the Solar System 2.4 \u2705 Task 4 \u2013 Discuss the Importance of Cosmic Velocities in Space Exploration \ud83d\ude80 Why These Velocities Matter: Velocity Application in Space Missions v\u2081 (orbital) Used to launch satellites into low Earth orbit (LEO), GPS satellites, ISS, etc. v\u2082 (escape) Required for interplanetary missions like Mars rovers or probes going beyond Earth\u2019s gravity. v\u2083 (solar escape) Needed for interstellar probes like Voyager 1 and future missions aiming to exit the Solar System. \ud83d\udccc Real-World Examples: Satellites (v\u2081): SpaceX and NASA rockets reach ~7.9 km/s to place satellites in LEO. Mars Missions (v\u2082): NASA\u2019s Perseverance rover used speeds above 11 km/s to break free from Earth\u2019s gravity and enter a trajectory toward Mars. code Define cosmic velocities for Earth (in m/s) v1 = 7.91e3 # first cosmic velocity v2 = 11.19e3 # second cosmic velocity v3 = 42.1e3 # third cosmic velocity def classify_velocity(v_launch): if v_launch < v1: return \"Suborbital flight \u2013 will fall back to Earth\" elif v1 <= v_launch < v2: return \"Orbital flight \u2013 will stay in orbit around Earth\" elif v2 <= v_launch < v3: return \"Escape trajectory \u2013 will escape Earth's gravity\" else: return \"Interstellar trajectory \u2013 will escape Solar System\" Example test velocities in m/s test_velocities = [3000, 7900, 11200, 45000] for v in test_velocities: result = classify_velocity(v) print(f\"Launch velocity: {v/1000:.1f} km/s -> {result}\") output Launch velocity: 3.0 km/s -> Suborbital flight \u2013 will fall back to Earth Launch velocity: 7.9 km/s -> Orbital flight \u2013 will stay in orbit around Earth Launch velocity: 11.2 km/s -> Escape trajectory \u2013 will escape Earth's gravity Launch velocity: 45.0 km/s -> Interstellar trajectory \u2013 will escape Solar System","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"gravity 2.1.1 Problem 2 \u2013 Task 1: Define the First, Second, and Third Cosmic Velocities \ud83d\udccc Definitions and Physical Meaning First Cosmic Velocity ( \ud835\udc63 1 v 1 \u200b ) \u2014 Orbital Velocity The minimum horizontal speed needed for an object to enter stable circular orbit near the surface of a planet (without propulsion). \ud835\udc63 1 = \ud835\udc3a \ud835\udc40 \ud835\udc5f v 1 \u200b = r GM \u200b \u200b Second Cosmic Velocity ( \ud835\udc63 2 v 2 \u200b ) \u2014 Escape Velocity The minimum speed required to break free from a planet\u2019s gravitational field without further propulsion. \ud835\udc63 2 = 2 \ud835\udc3a \ud835\udc40 \ud835\udc5f v 2 \u200b = r 2GM \u200b \u200b Third Cosmic Velocity ( \ud835\udc63 3 v 3 \u200b ) \u2014 Interstellar Escape Velocity The minimum speed needed to escape the gravitational pull of the Sun from Earth\u2019s orbit (i.e., to leave the solar system). \ud835\udc63 3 = \ud835\udc63 Earth orbit 2 + \ud835\udc63 2 2 v 3 \u200b = v Earth orbit 2 \u200b +v 2 2 \u200b \u200b Where: \ud835\udc63 Earth orbit \u2248 29.78 \u2009 km/s v Earth orbit \u200b \u224829.78km/s (orbital velocity of Earth around Sun), \ud835\udc63 2 \u2248 11.2 \u2009 km/s v 2 \u200b \u224811.2km/s (escape velocity from E code import numpy as np","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#gravitational-constant","text":"G = 6.67430e-11 # m^3 kg^-1 s^-2","title":"Gravitational constant"},{"location":"1%20Physics/2%20Gravity/Problem_2/#define-planets-with-mass-kg-and-radius-m","text":"planets = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.390e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.991e7} }","title":"Define planets with mass (kg) and radius (m)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#function-to-compute-v1-and-v2","text":"def compute_cosmic_velocities(mass, radius): v1 = np.sqrt(G * mass / radius) # First cosmic velocity v2 = np.sqrt(2 * G * mass / radius) # Second cosmic velocity return v1, v2","title":"Function to compute v1 and v2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#calculate-and-print","text":"for planet, data in planets.items(): v1, v2 = compute_cosmic_velocities(data[\"mass\"], data[\"radius\"]) print(f\"{planet}:\\n First Cosmic Velocity (v1): {v1/1000:.2f} km/s\\n Second Cosmic Velocity (v2): {v2/1000:.2f} km/s\\n\") output Earth: First Cosmic Velocity (v1): 7.91 km/s Second Cosmic Velocity (v2): 11.19 km/s Mars: First Cosmic Velocity (v1): 3.55 km/s Second Cosmic Velocity (v2): 5.03 km/s Jupiter: First Cosmic Velocity (v1): 42.06 km/s Second Cosmic Velocity (v2): 59.54 km/s 2.2 \u2705 Problem 2 \u2013 Task 2: Mathematical Derivations and Key Influences \ud83d\udd39 1. First Cosmic Velocity ( \ud835\udc63 1 v 1 \u200b ) \u2013 Orbital Velocity Goal: Derive the velocity for a stable circular orbit. Derivation: For an object in circular orbit, gravitational force provides the centripetal force: \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 = \ud835\udc5a \ud835\udc63 2 \ud835\udc5f r 2 GMm \u200b = r mv 2 \u200b Simplify and solve for \ud835\udc63 v: \ud835\udc63 1 = \ud835\udc3a \ud835\udc40 \ud835\udc5f v 1 \u200b = r GM \u200b \u200b Influencing Parameters: \ud835\udc3a G: Universal constant (fixed) \ud835\udc40 M: Mass of the planet/star \ud835\udc5f r: Distance from the center of mass \ud83d\udd39 2. Second Cosmic Velocity ( \ud835\udc63 2 v 2 \u200b ) \u2013 Escape Velocity Goal: Minimum speed to break free from gravity with no further propulsion. Derivation (energy balance): Kinetic Energy = Gravitational Potential Energy Kinetic Energy=Gravitational Potential Energy 1 2 \ud835\udc5a \ud835\udc63 2 = \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f \u21d2 \ud835\udc63 2 = 2 \ud835\udc3a \ud835\udc40 \ud835\udc5f 2 1 \u200b mv 2 = r GMm \u200b \u21d2v 2 \u200b = r 2GM \u200b \u200b Key Differences from \ud835\udc63 1 v 1 \u200b : Escape velocity is \u221a2 times the orbital velocity at the same radius: \ud835\udc63 2 = 2 \u22c5 \ud835\udc63 1 v 2 \u200b = 2 \u200b \u22c5v 1 \u200b \ud83d\udd39 3. Third Cosmic Velocity ( \ud835\udc63 3 v 3 \u200b ) \u2013 Escape Solar System This velocity depends on: Escape from Earth\u2019s gravity: \ud835\udc63 2 v 2 \u200b Speed to overcome Sun\u2019s gravity from Earth\u2019s orbit: \ud835\udc63 solar v solar \u200b Approximated as: \ud835\udc63 3 = \ud835\udc63 2 2 + \ud835\udc63 Earth orbit 2 v 3 \u200b = v 2 2 \u200b +v Earth orbit 2 \u200b \u200b Using: \ud835\udc63 2 \u2248 11.2 v 2 \u200b \u224811.2 km/s \ud835\udc63 Earth orbit \u2248 29.78 v Earth orbit \u200b \u224829.78 km/s \ud835\udc63 3 \u2248 ( 11.2 ) 2 + ( 29.78 ) 2 \u2248 32.7 km/s v 3 \u200b \u2248 (11.2) 2 +(29.78) 2 \u200b \u224832.7 km/s code import numpy as np","title":"Calculate and print"},{"location":"1%20Physics/2%20Gravity/Problem_2/#constants","text":"G = 6.67430e-11 # m^3 kg^-1 s^-2 M_sun = 1.989e30 # kg","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#orbital-speed-of-earth-around-sun-for-v3","text":"v_earth_orbit = 29.78e3 # m/s","title":"Orbital speed of Earth around Sun (for v3)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#planet-data-mass-kg-radius-m","text":"planets = { \"Earth\": {\"mass\": 5.972e24, \"radius\": 6.371e6}, \"Mars\": {\"mass\": 6.417e23, \"radius\": 3.390e6}, \"Jupiter\": {\"mass\": 1.898e27, \"radius\": 6.991e7} }","title":"Planet data: mass (kg), radius (m)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#compute-and-print-cosmic-velocities","text":"for name, data in planets.items(): M = data[\"mass\"] r = data[\"radius\"] v1 = np.sqrt(G * M / r) # First cosmic velocity v2 = np.sqrt(2 * G * M / r) # Second cosmic velocity # For Earth, compute v3 using its orbital speed if name == \"Earth\": v3 = np.sqrt(v2**2 + v_earth_orbit**2) else: v3 = None print(f\"\\n{name}\") print(f\"First Cosmic Velocity (v1): {v1/1000:.2f} km/s\") print(f\"Second Cosmic Velocity (v2): {v2/1000:.2f} km/s\") if v3: print(f\"Third Cosmic Velocity (v3): {v3/1000:.2f} km/s\") ouput Earth First Cosmic Velocity (v1): 7.91 km/s Second Cosmic Velocity (v2): 11.19 km/s Third Cosmic Velocity (v3): 31.81 km/s Mars First Cosmic Velocity (v1): 3.55 km/s Second Cosmic Velocity (v2): 5.03 km/s Jupiter First Cosmic Velocity (v1): 42.57 km/s Second Cosmic Velocity (v2): 60.20 km/s 2.3 Task 3 \u2013 Analyze Real-World Examples for Cosmic Velocities \ud83c\udfaf Goal: Calculate and visualize the first, second, and third cosmic velocities for Earth, Mars, and Jupiter \u2014 and understand what they mean in the context of space exploration. \ud83e\uddee Real Data Used: Planet Mass (kg) Radius (m) Earth 5.972 \u00d7 10\u00b2\u2074 6.371 \u00d7 10\u2076 Mars 6.417 \u00d7 10\u00b2\u00b3 3.390 \u00d7 10\u2076 Jupiter 1.898 \u00d7 10\u00b2\u2077 6.991 \u00d7 10\u2077 \ud83d\udd22 Results (in km/s): Planet v\u2081 (orbit) v\u2082 (escape) v\u2083 (escape Solar System) Earth ~7.91 ~11.19 ~42.1 Mars ~3.55 ~5.03 N/A Jupiter ~42.07 ~59.54 N/A v\u2081: Needed to stay in a circular orbit near the surface v\u2082: Minimum speed to escape the planet\u2019s gravity v\u2083: Only calculated for Earth \u2014 it\u2019s the speed to escape the Solar System 2.4 \u2705 Task 4 \u2013 Discuss the Importance of Cosmic Velocities in Space Exploration \ud83d\ude80 Why These Velocities Matter: Velocity Application in Space Missions v\u2081 (orbital) Used to launch satellites into low Earth orbit (LEO), GPS satellites, ISS, etc. v\u2082 (escape) Required for interplanetary missions like Mars rovers or probes going beyond Earth\u2019s gravity. v\u2083 (solar escape) Needed for interstellar probes like Voyager 1 and future missions aiming to exit the Solar System. \ud83d\udccc Real-World Examples: Satellites (v\u2081): SpaceX and NASA rockets reach ~7.9 km/s to place satellites in LEO. Mars Missions (v\u2082): NASA\u2019s Perseverance rover used speeds above 11 km/s to break free from Earth\u2019s gravity and enter a trajectory toward Mars. code","title":"Compute and print cosmic velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#define-cosmic-velocities-for-earth-in-ms","text":"v1 = 7.91e3 # first cosmic velocity v2 = 11.19e3 # second cosmic velocity v3 = 42.1e3 # third cosmic velocity def classify_velocity(v_launch): if v_launch < v1: return \"Suborbital flight \u2013 will fall back to Earth\" elif v1 <= v_launch < v2: return \"Orbital flight \u2013 will stay in orbit around Earth\" elif v2 <= v_launch < v3: return \"Escape trajectory \u2013 will escape Earth's gravity\" else: return \"Interstellar trajectory \u2013 will escape Solar System\"","title":"Define cosmic velocities for Earth (in m/s)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-test-velocities-in-ms","text":"test_velocities = [3000, 7900, 11200, 45000] for v in test_velocities: result = classify_velocity(v) print(f\"Launch velocity: {v/1000:.1f} km/s -> {result}\") output Launch velocity: 3.0 km/s -> Suborbital flight \u2013 will fall back to Earth Launch velocity: 7.9 km/s -> Orbital flight \u2013 will stay in orbit around Earth Launch velocity: 11.2 km/s -> Escape trajectory \u2013 will escape Earth's gravity Launch velocity: 45.0 km/s -> Interstellar trajectory \u2013 will escape Solar System","title":"Example test velocities in m/s"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 31.1 Newton's Law of Gravitation: The gravitational force acting on an object near Earth is: \ud835\udc39 \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 F= r 2 GMm \u200b Where: \ud835\udc3a G is the gravitational constant ( 6.67430 \u00d7 10 \u2212 11 \u2009 m 3 kg \u2212 1 s \u2212 2 6.67430\u00d710 \u221211 m 3 kg \u22121 s \u22122 ), \ud835\udc40 M is Earth's mass ( 5.972 \u00d7 10 24 \u2009 kg 5.972\u00d710 24 kg), \ud835\udc5a m is the payload mass, \ud835\udc5f r is the distance from the Earth's center. Conservation of Mechanical Energy: The total mechanical energy (kinetic + potential) is conserved. The total energy \ud835\udc38 E is given by: \ud835\udc38 1 2 \ud835\udc5a \ud835\udc63 2 \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f E= 2 1 \u200b mv 2 \u2212 r GMm \u200b Where: \ud835\udc63 v is the velocity of the object, \ud835\udc5f r is the distance from Earth's center. For Different Trajectories: Parabolic Trajectory: The object has exactly enough energy to escape Earth's gravity and follow a parabolic path. The total energy \ud835\udc38 = 0 E=0. Therefore, the initial velocity for a parabolic trajectory is: 1 2 \ud835\udc5a \ud835\udc63 2 = \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 1 \u200b mv 2 = r GMm \u200b This means the object is launched at escape velocity but not with enough speed to form an elliptical or hyperbolic orbit. Elliptical Trajectory: When the object\u2019s total energy is negative ( \ud835\udc38 < 0 E<0), it follows an elliptical orbit. The orbital energy for elliptical orbits is: \ud835\udc38 \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5a 2 \ud835\udc4e E=\u2212 2a GMm \u200b Where \ud835\udc4e a is the semi-major axis of the ellipse. Hyperbolic Trajectory: When the object's total energy is positive ( \ud835\udc38 0 E>0), it follows a hyperbolic trajectory and escapes Earth\u2019s gravitational influence. The trajectory equation is: \ud835\udc38 1 2 \ud835\udc5a \ud835\udc63 2 \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f E= 2 1 \u200b mv 2 \u2212 r GMm \u200b And the object is traveling fast enough to escape Earth's gravity. 3.1.2 Step 1: Mathematical Model We'll use Newton's Second Law and Law of Universal Gravitation: Gravitational Acceleration: \ud835\udc4e \ud835\udc3a \ud835\udc40 \ud835\udc5f 2 a= r 2 GM \u200b The object moves under this central force. So, using numerical integration (e.g., Runge-Kutta or Euler method), we can compute the path (trajectory) step-by-step. 3.1.3 Trajectory Types and Real Scenarios: 1. Suborbital / Reentry Trajectory Condition: Initial speed < orbital speed (~7.8 km/s at low Earth orbit) Result: Payload follows an arc and eventually falls back to Earth Example: Space tourism flights (e.g., Blue Origin) Circular or Elliptical Orbit (Orbital Insertion) Condition: Initial speed ~7.8 km/s (circular) or slightly higher (elliptical) Result: Stable orbit if properly timed and angled Example: Satellites and ISS missions Escape Trajectory (Hyperbolic) Condition: Initial speed > 11.2 km/s (Earth escape velocity) Result: Payload leaves Earth\u2019s gravitational influence Example: Interplanetary probes like Voyager, Mars rovers \u2708\ufe0f Application Summary: Trajectory Type Required Speed (LEO) Real-World Use Suborbital < 7.8 km/s Space tourism, test rockets Orbital (Circular/Elliptical) \u2248 7.8 \u2013 11.2 km/s Satellites, ISS missions Escape (Hyperbolic) > 11.2 km/s Interplanetary missions 3.1.4 \u2705 Fundamental Equations (Formulas) Newton\u2019s Law of Gravitation: \ud835\udc39 \u20d7 \ud835\udc54 \ud835\udc5f \ud835\udc4e \ud835\udc63 \ud835\udc56 \ud835\udc61 \ud835\udc66 = \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 \ud835\udc5f ^ F gravity \u200b =\u2212 r 2 GMm \u200b r ^ \ud835\udc3a G: gravitational constant \ud835\udc40 M: mass of the Earth \ud835\udc5a m: mass of the payload \ud835\udc5f r: distance from Earth's center \ud835\udc5f ^ r ^ : unit vector in the radial direction The negative sign indicates the force is attractive. Newton\u2019s Second Law (F = ma): \ud835\udc4e \u20d7 = \ud835\udc39 \u20d7 \ud835\udc5a = \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5f 3 \ud835\udc5f \u20d7 a = m F \u200b =\u2212 r 3 GM \u200b r This gives the acceleration vector acting on the payload. Equations of motion (in 2D): \ud835\udc51 2 \ud835\udc65 \ud835\udc51 \ud835\udc61 2 = \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc65 ( \ud835\udc65 2 + \ud835\udc66 2 ) 3 / 2 , \ud835\udc51 2 \ud835\udc66 \ud835\udc51 \ud835\udc61 2 = \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc66 ( \ud835\udc65 2 + \ud835\udc66 2 ) 3 / 2 dt 2 d 2 x \u200b =\u2212 (x 2 +y 2 ) 3/2 GMx \u200b , dt 2 d 2 y \u200b =\u2212 (x 2 +y 2 ) 3/2 GMy \u200b These differential equations are solved numerically in the Python code using a simple Euler integration method.","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"31.1 Newton's Law of Gravitation: The gravitational force acting on an object near Earth is:","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#f","text":"\ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 F= r 2 GMm \u200b Where: \ud835\udc3a G is the gravitational constant ( 6.67430 \u00d7 10 \u2212 11 \u2009 m 3 kg \u2212 1 s \u2212 2 6.67430\u00d710 \u221211 m 3 kg \u22121 s \u22122 ), \ud835\udc40 M is Earth's mass ( 5.972 \u00d7 10 24 \u2009 kg 5.972\u00d710 24 kg), \ud835\udc5a m is the payload mass, \ud835\udc5f r is the distance from the Earth's center. Conservation of Mechanical Energy: The total mechanical energy (kinetic + potential) is conserved. The total energy \ud835\udc38 E is given by:","title":"\ud835\udc39"},{"location":"1%20Physics/2%20Gravity/Problem_3/#e","text":"1 2 \ud835\udc5a \ud835\udc63 2 \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f E= 2 1 \u200b mv 2 \u2212 r GMm \u200b Where: \ud835\udc63 v is the velocity of the object, \ud835\udc5f r is the distance from Earth's center. For Different Trajectories: Parabolic Trajectory: The object has exactly enough energy to escape Earth's gravity and follow a parabolic path. The total energy \ud835\udc38 = 0 E=0. Therefore, the initial velocity for a parabolic trajectory is: 1 2 \ud835\udc5a \ud835\udc63 2 = \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 1 \u200b mv 2 = r GMm \u200b This means the object is launched at escape velocity but not with enough speed to form an elliptical or hyperbolic orbit. Elliptical Trajectory: When the object\u2019s total energy is negative ( \ud835\udc38 < 0 E<0), it follows an elliptical orbit. The orbital energy for elliptical orbits is:","title":"\ud835\udc38"},{"location":"1%20Physics/2%20Gravity/Problem_3/#e_1","text":"\u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5a 2 \ud835\udc4e E=\u2212 2a GMm \u200b Where \ud835\udc4e a is the semi-major axis of the ellipse. Hyperbolic Trajectory: When the object's total energy is positive ( \ud835\udc38 0 E>0), it follows a hyperbolic trajectory and escapes Earth\u2019s gravitational influence. The trajectory equation is:","title":"\ud835\udc38"},{"location":"1%20Physics/2%20Gravity/Problem_3/#e_2","text":"1 2 \ud835\udc5a \ud835\udc63 2 \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f E= 2 1 \u200b mv 2 \u2212 r GMm \u200b And the object is traveling fast enough to escape Earth's gravity. 3.1.2 Step 1: Mathematical Model We'll use Newton's Second Law and Law of Universal Gravitation: Gravitational Acceleration:","title":"\ud835\udc38"},{"location":"1%20Physics/2%20Gravity/Problem_3/#a","text":"\ud835\udc3a \ud835\udc40 \ud835\udc5f 2 a= r 2 GM \u200b The object moves under this central force. So, using numerical integration (e.g., Runge-Kutta or Euler method), we can compute the path (trajectory) step-by-step. 3.1.3 Trajectory Types and Real Scenarios: 1. Suborbital / Reentry Trajectory Condition: Initial speed < orbital speed (~7.8 km/s at low Earth orbit) Result: Payload follows an arc and eventually falls back to Earth Example: Space tourism flights (e.g., Blue Origin) Circular or Elliptical Orbit (Orbital Insertion) Condition: Initial speed ~7.8 km/s (circular) or slightly higher (elliptical) Result: Stable orbit if properly timed and angled Example: Satellites and ISS missions Escape Trajectory (Hyperbolic) Condition: Initial speed > 11.2 km/s (Earth escape velocity) Result: Payload leaves Earth\u2019s gravitational influence Example: Interplanetary probes like Voyager, Mars rovers \u2708\ufe0f Application Summary: Trajectory Type Required Speed (LEO) Real-World Use Suborbital < 7.8 km/s Space tourism, test rockets Orbital (Circular/Elliptical) \u2248 7.8 \u2013 11.2 km/s Satellites, ISS missions Escape (Hyperbolic) > 11.2 km/s Interplanetary missions 3.1.4 \u2705 Fundamental Equations (Formulas) Newton\u2019s Law of Gravitation: \ud835\udc39 \u20d7 \ud835\udc54 \ud835\udc5f \ud835\udc4e \ud835\udc63 \ud835\udc56 \ud835\udc61 \ud835\udc66 = \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 \ud835\udc5f ^ F gravity \u200b =\u2212 r 2 GMm \u200b r ^ \ud835\udc3a G: gravitational constant \ud835\udc40 M: mass of the Earth \ud835\udc5a m: mass of the payload \ud835\udc5f r: distance from Earth's center \ud835\udc5f ^ r ^ : unit vector in the radial direction The negative sign indicates the force is attractive. Newton\u2019s Second Law (F = ma): \ud835\udc4e \u20d7 = \ud835\udc39 \u20d7 \ud835\udc5a = \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc5f 3 \ud835\udc5f \u20d7 a = m F \u200b =\u2212 r 3 GM \u200b r This gives the acceleration vector acting on the payload. Equations of motion (in 2D): \ud835\udc51 2 \ud835\udc65 \ud835\udc51 \ud835\udc61 2 = \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc65 ( \ud835\udc65 2 + \ud835\udc66 2 ) 3 / 2 , \ud835\udc51 2 \ud835\udc66 \ud835\udc51 \ud835\udc61 2 = \u2212 \ud835\udc3a \ud835\udc40 \ud835\udc66 ( \ud835\udc65 2 + \ud835\udc66 2 ) 3 / 2 dt 2 d 2 x \u200b =\u2212 (x 2 +y 2 ) 3/2 GMx \u200b , dt 2 d 2 y \u200b =\u2212 (x 2 +y 2 ) 3/2 GMy \u200b These differential equations are solved numerically in the Python code using a simple Euler integration method.","title":"\ud835\udc4e"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1 waves 1.1 Sure! Here's your full message translated and written in clear English for a project or report setting: Thank you! From the images and document, it's clear that the main objective is to analyze the interference patterns created by circular water waves originating from the vertices of a regular polygon (e.g., triangle, square, pentagon). These waves overlap (interfere), producing areas of constructive (amplifying) and destructive (canceling) interference. Mathematical Model: A single point source emits a circular wave described by the following equation: \\[ \\eta(x, y, t) = \\frac{A}{\\sqrt{r}} \\cos(kr - \\omega t + \\phi) \\] Where: \\(r = \\sqrt{(x - x_0)^2 + (y - y_0)^2}\\) is the distance from the point \\((x, y)\\) to the source \\((x_0, y_0)\\) , \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number, and \\(\\omega = 2\\pi f\\) is the angular frequency, \\(A\\) is the amplitude of the wave, \\(\\phi\\) is the initial phase. Superposition Principle: To compute the total wave displacement at each point, we use the superposition of waves from all sources: \\[ \\eta_{\\text{sum}}(x, y, t) = \\sum_{i=1}^{N} \\eta_i(x, y, t) \\]","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"waves 1.1 Sure! Here's your full message translated and written in clear English for a project or report setting: Thank you! From the images and document, it's clear that the main objective is to analyze the interference patterns created by circular water waves originating from the vertices of a regular polygon (e.g., triangle, square, pentagon). These waves overlap (interfere), producing areas of constructive (amplifying) and destructive (canceling) interference.","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#mathematical-model","text":"A single point source emits a circular wave described by the following equation: \\[ \\eta(x, y, t) = \\frac{A}{\\sqrt{r}} \\cos(kr - \\omega t + \\phi) \\] Where: \\(r = \\sqrt{(x - x_0)^2 + (y - y_0)^2}\\) is the distance from the point \\((x, y)\\) to the source \\((x_0, y_0)\\) , \\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number, and \\(\\omega = 2\\pi f\\) is the angular frequency, \\(A\\) is the amplitude of the wave, \\(\\phi\\) is the initial phase.","title":"Mathematical Model:"},{"location":"1%20Physics/3%20Waves/Problem_1/#superposition-principle","text":"To compute the total wave displacement at each point, we use the superposition of waves from all sources: \\[ \\eta_{\\text{sum}}(x, y, t) = \\sum_{i=1}^{N} \\eta_i(x, y, t) \\]","title":"Superposition Principle:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1 Electromangetism\u00b6 Mathematical Formulation The Lorentz force acting on a charged particle is given by: \ud835\udc39 \u20d7 = \ud835\udc5e ( \ud835\udc38 \u20d7 + \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) F =q( E + v \u00d7 B ) In the case of only a uniform magnetic field (i.e., \ud835\udc38 \u20d7 = 0 E =0), the force becomes: \ud835\udc39 \u20d7 = \ud835\udc5e ( \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) F =q( v \u00d7 B ) According to Newton's second law: \ud835\udc5a \ud835\udc51 \ud835\udc63 \u20d7 \ud835\udc51 \ud835\udc61 = \ud835\udc5e ( \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) m dt d v \u200b =q( v \u00d7 B ) This results in circular motion when the velocity is perpendicular to the magnetic field.","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"Electromangetism\u00b6 Mathematical Formulation The Lorentz force acting on a charged particle is given by: \ud835\udc39 \u20d7 = \ud835\udc5e ( \ud835\udc38 \u20d7 + \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) F =q( E + v \u00d7 B ) In the case of only a uniform magnetic field (i.e., \ud835\udc38 \u20d7 = 0 E =0), the force becomes: \ud835\udc39 \u20d7 = \ud835\udc5e ( \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) F =q( v \u00d7 B ) According to Newton's second law: \ud835\udc5a \ud835\udc51 \ud835\udc63 \u20d7 \ud835\udc51 \ud835\udc61 = \ud835\udc5e ( \ud835\udc63 \u20d7 \u00d7 \ud835\udc35 \u20d7 ) m dt d v \u200b =q( v \u00d7 B ) This results in circular motion when the velocity is perpendicular to the magnetic field.","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1 ir ccuits 1.1 \ud83d\udd39 Mathematical Concepts 1. Series Rule: Resistors in series simply add: \ud835\udc45 eq = \ud835\udc45 1 + \ud835\udc45 2 + \u22ef + \ud835\udc45 \ud835\udc5b R eq \u200b =R 1 \u200b +R 2 \u200b +\u22ef+R n \u200b Parallel Rule: Resistors in parallel combine reciprocally: 1 \ud835\udc45 eq = 1 \ud835\udc45 1 + 1 \ud835\udc45 2 + \u22ef + 1 \ud835\udc45 \ud835\udc5b R eq \u200b 1 \u200b = R 1 \u200b 1 \u200b + R 2 \u200b 1 \u200b +\u22ef+ R n \u200b 1 \u200b \ud83d\udd39 Algorithm Description (English) Step-by-step outline: Input: A graph \ud835\udc3a = ( \ud835\udc49 , \ud835\udc38 ) G=(V,E) with resistors as edge weights. Identify series connections: Look for nodes with exactly 2 neighbors (degree = 2). Combine the two connecting resistors in series. Identify parallel connections: Find multiple edges between the same two nodes. Combine them using the parallel rule. Reduce the graph iteratively until only 2 nodes remain: the source and target. Return the final resistance between these nodes. import networkx as nx def combine_parallel_resistors(resistances): # Combine resistances in parallel: 1/R = 1/R1 + 1/R2 + ... inverse_total = sum(1/r for r in resistances) return 1 / inverse_total if inverse_total != 0 else float('inf') def simplify_circuit(G): # Combine parallel resistors edges_to_check = list(G.edges(data=True)) edge_dict = {} for u, v, data in edges_to_check: key = tuple(sorted((u, v))) if key not in edge_dict: edge_dict[key] = [] edge_dict[key].append(data['resistance']) # Rebuild the graph with combined resistors H = nx.Graph() for (u, v), resistances in edge_dict.items(): if len(resistances) == 1: R_eq = resistances[0] else: R_eq = combine_parallel_resistors(resistances) H.add_edge(u, v, resistance=R_eq) return H Example usage G = nx.MultiGraph() G.add_edge('A', 'B', resistance=2) G.add_edge('A', 'B', resistance=3) G.add_edge('B', 'C', resistance=4) simplified = simplify_circuit(G) for u, v, data in simplified.edges(data=True): print(f\"Edge {u}-{v}: {data['resistance']} Ohms\") 1.2 Create a Python program that: Accepts any circuit as a graph (nodes = junctions, edges = resistors), Handles series, parallel, and nested combinations, Calculates total equivalent resistance between two given nodes. We'll use NetworkX to manage graph structure. \ud83d\udd27 Approach \ud83d\udccc 1. Definitions Series: Node with degree 2, not a start/end node \u2192 combine resistors. Parallel: Multiple edges between same two nodes \u2192 combine resistors in parallel. Repeat these reductions until only two nodes remain: the source and target. import networkx as nx def combine_parallel(resistances): inverse = sum(1/r for r in resistances) return 1 / inverse if inverse != 0 else float('inf') def simplify_parallel(G): \"\"\"Simplify all parallel edges between the same pair of nodes.\"\"\" new_G = nx.Graph() edge_map = {} for u, v, data in G.edges(data=True): key = tuple(sorted((u, v))) edge_map.setdefault(key, []).append(data['resistance']) for (u, v), res_list in edge_map.items(): if len(res_list) == 1: R_eq = res_list[0] else: R_eq = combine_parallel(res_list) new_G.add_edge(u, v, resistance=R_eq) return new_G def simplify_series(G, source, target): \"\"\"Collapse series nodes (degree 2 and not source/target).\"\"\" changed = True while changed: changed = False for node in list(G.nodes): if node in (source, target): continue neighbors = list(G.neighbors(node)) if len(neighbors) == 2: u, v = neighbors R1 = G[node][u]['resistance'] R2 = G[node][v]['resistance'] R_new = R1 + R2 G.remove_node(node) G.add_edge(u, v, resistance=R_new) changed = True break return G def calculate_equivalent_resistance(G, source, target): G = simplify_parallel(G) G = simplify_series(G, source, target) if G.has_edge(source, target): return G[source][target]['resistance'] else: return float('inf') # disconnected --------------------- \ud83d\udd2c EXAMPLES --------------------- Example 1: Simple Series G1 = nx.MultiGraph() G1.add_edge('A', 'B', resistance=2) G1.add_edge('B', 'C', resistance=3) G1 = simplify_parallel(G1) R1 = calculate_equivalent_resistance(G1, 'A', 'C') print(\"Example 1 (Series): R_eq =\", R1) Example 2: Simple Parallel G2 = nx.MultiGraph() G2.add_edge('A', 'B', resistance=2) G2.add_edge('A', 'B', resistance=4) G2 = simplify_parallel(G2) R2 = calculate_equivalent_resistance(G2, 'A', 'B') print(\"Example 2 (Parallel): R_eq =\", R2) Example 3: Nested Combination G3 = nx.MultiGraph() G3.add_edge('A', 'B', resistance=1) G3.add_edge('B', 'C', resistance=1) G3.add_edge('C', 'D', resistance=1) G3.add_edge('A', 'D', resistance=2) # Parallel to path A-B-C-D G3 = simplify_parallel(G3) R3 = calculate_equivalent_resistance(G3, 'A', 'D') print(\"Example 3 (Nested): R_eq =\", R3)","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"ir ccuits 1.1 \ud83d\udd39 Mathematical Concepts 1. Series Rule: Resistors in series simply add: \ud835\udc45 eq = \ud835\udc45 1 + \ud835\udc45 2 + \u22ef + \ud835\udc45 \ud835\udc5b R eq \u200b =R 1 \u200b +R 2 \u200b +\u22ef+R n \u200b Parallel Rule: Resistors in parallel combine reciprocally: 1 \ud835\udc45 eq = 1 \ud835\udc45 1 + 1 \ud835\udc45 2 + \u22ef + 1 \ud835\udc45 \ud835\udc5b R eq \u200b 1 \u200b = R 1 \u200b 1 \u200b + R 2 \u200b 1 \u200b +\u22ef+ R n \u200b 1 \u200b \ud83d\udd39 Algorithm Description (English) Step-by-step outline: Input: A graph \ud835\udc3a = ( \ud835\udc49 , \ud835\udc38 ) G=(V,E) with resistors as edge weights. Identify series connections: Look for nodes with exactly 2 neighbors (degree = 2). Combine the two connecting resistors in series. Identify parallel connections: Find multiple edges between the same two nodes. Combine them using the parallel rule. Reduce the graph iteratively until only 2 nodes remain: the source and target. Return the final resistance between these nodes. import networkx as nx def combine_parallel_resistors(resistances): # Combine resistances in parallel: 1/R = 1/R1 + 1/R2 + ... inverse_total = sum(1/r for r in resistances) return 1 / inverse_total if inverse_total != 0 else float('inf') def simplify_circuit(G): # Combine parallel resistors edges_to_check = list(G.edges(data=True)) edge_dict = {} for u, v, data in edges_to_check: key = tuple(sorted((u, v))) if key not in edge_dict: edge_dict[key] = [] edge_dict[key].append(data['resistance']) # Rebuild the graph with combined resistors H = nx.Graph() for (u, v), resistances in edge_dict.items(): if len(resistances) == 1: R_eq = resistances[0] else: R_eq = combine_parallel_resistors(resistances) H.add_edge(u, v, resistance=R_eq) return H","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-usage","text":"G = nx.MultiGraph() G.add_edge('A', 'B', resistance=2) G.add_edge('A', 'B', resistance=3) G.add_edge('B', 'C', resistance=4) simplified = simplify_circuit(G) for u, v, data in simplified.edges(data=True): print(f\"Edge {u}-{v}: {data['resistance']} Ohms\") 1.2 Create a Python program that: Accepts any circuit as a graph (nodes = junctions, edges = resistors), Handles series, parallel, and nested combinations, Calculates total equivalent resistance between two given nodes. We'll use NetworkX to manage graph structure. \ud83d\udd27 Approach \ud83d\udccc 1. Definitions Series: Node with degree 2, not a start/end node \u2192 combine resistors. Parallel: Multiple edges between same two nodes \u2192 combine resistors in parallel. Repeat these reductions until only two nodes remain: the source and target. import networkx as nx def combine_parallel(resistances): inverse = sum(1/r for r in resistances) return 1 / inverse if inverse != 0 else float('inf') def simplify_parallel(G): \"\"\"Simplify all parallel edges between the same pair of nodes.\"\"\" new_G = nx.Graph() edge_map = {} for u, v, data in G.edges(data=True): key = tuple(sorted((u, v))) edge_map.setdefault(key, []).append(data['resistance']) for (u, v), res_list in edge_map.items(): if len(res_list) == 1: R_eq = res_list[0] else: R_eq = combine_parallel(res_list) new_G.add_edge(u, v, resistance=R_eq) return new_G def simplify_series(G, source, target): \"\"\"Collapse series nodes (degree 2 and not source/target).\"\"\" changed = True while changed: changed = False for node in list(G.nodes): if node in (source, target): continue neighbors = list(G.neighbors(node)) if len(neighbors) == 2: u, v = neighbors R1 = G[node][u]['resistance'] R2 = G[node][v]['resistance'] R_new = R1 + R2 G.remove_node(node) G.add_edge(u, v, resistance=R_new) changed = True break return G def calculate_equivalent_resistance(G, source, target): G = simplify_parallel(G) G = simplify_series(G, source, target) if G.has_edge(source, target): return G[source][target]['resistance'] else: return float('inf') # disconnected","title":"Example usage"},{"location":"1%20Physics/5%20Circuits/Problem_1/#-","text":"","title":"---------------------"},{"location":"1%20Physics/5%20Circuits/Problem_1/#examples","text":"","title":"\ud83d\udd2c EXAMPLES"},{"location":"1%20Physics/5%20Circuits/Problem_1/#-_1","text":"","title":"---------------------"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-1-simple-series","text":"G1 = nx.MultiGraph() G1.add_edge('A', 'B', resistance=2) G1.add_edge('B', 'C', resistance=3) G1 = simplify_parallel(G1) R1 = calculate_equivalent_resistance(G1, 'A', 'C') print(\"Example 1 (Series): R_eq =\", R1)","title":"Example 1: Simple Series"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-2-simple-parallel","text":"G2 = nx.MultiGraph() G2.add_edge('A', 'B', resistance=2) G2.add_edge('A', 'B', resistance=4) G2 = simplify_parallel(G2) R2 = calculate_equivalent_resistance(G2, 'A', 'B') print(\"Example 2 (Parallel): R_eq =\", R2)","title":"Example 2: Simple Parallel"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-3-nested-combination","text":"G3 = nx.MultiGraph() G3.add_edge('A', 'B', resistance=1) G3.add_edge('B', 'C', resistance=1) G3.add_edge('C', 'D', resistance=1) G3.add_edge('A', 'D', resistance=2) # Parallel to path A-B-C-D G3 = simplify_parallel(G3) R3 = calculate_equivalent_resistance(G3, 'A', 'D') print(\"Example 3 (Nested): R_eq =\", R3)","title":"Example 3: Nested Combination"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"statitics 1.1 Mathematical Foundation (Population Distribution) Let \ud835\udc4b X be a random variable drawn from a population distribution with: Mean: \ud835\udf07 = \ud835\udc38 [ \ud835\udc4b ] \u03bc=E[X] Variance: \ud835\udf0e 2 = Var ( \ud835\udc4b ) \u03c3 2 =Var(X) We define the sample mean for a sample of size \ud835\udc5b n as: \ud835\udc4b \u02c9 \ud835\udc5b = 1 \ud835\udc5b \u2211 \ud835\udc56 = 1 \ud835\udc5b \ud835\udc4b \ud835\udc56 X \u02c9 n \u200b = n 1 \u200b i=1 \u2211 n \u200b X i \u200b According to the Central Limit Theorem, as \ud835\udc5b \u2192 \u221e n\u2192\u221e, the distribution of \ud835\udc4b \u02c9 \ud835\udc5b X \u02c9 n \u200b tends toward: \ud835\udc4b \u02c9 \ud835\udc5b \u223c \ud835\udc41 ( \ud835\udf07 , \ud835\udf0e 2 \ud835\udc5b ) X \u02c9 n \u200b \u223cN(\u03bc, n \u03c3 2 \u200b ) 1.2 Mathematical Background Given a population with mean \ud835\udf07 \u03bc and variance \ud835\udf0e 2 \u03c3 2 , the sampling distribution of the sample mean for sample size \ud835\udc5b n is: \ud835\udc4b \u02c9 \ud835\udc5b = 1 \ud835\udc5b \u2211 \ud835\udc56 = 1 \ud835\udc5b \ud835\udc4b \ud835\udc56 \u223c \ud835\udc41 ( \ud835\udf07 , \ud835\udf0e 2 \ud835\udc5b ) as \ud835\udc5b \u2192 \u221e X \u02c9 n \u200b = n 1 \u200b i=1 \u2211 n \u200b X i \u200b \u223cN(\u03bc, n \u03c3 2 \u200b )as n\u2192\u221e This means regardless of the original distribution, the distribution of sample means will tend to a normal distribution as sample size increases.","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"}]}